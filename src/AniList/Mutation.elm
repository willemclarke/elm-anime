-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module AniList.Mutation exposing (..)

import AniList.Enum.LikeableType
import AniList.Enum.MediaListStatus
import AniList.Enum.MediaType
import AniList.Enum.RecommendationRating
import AniList.Enum.ReviewRating
import AniList.Enum.ScoreFormat
import AniList.Enum.UserStaffNameLanguage
import AniList.Enum.UserTitleLanguage
import AniList.InputObject
import AniList.Interface
import AniList.Object
import AniList.Scalar
import AniList.ScalarCodecs
import AniList.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias UpdateUserOptionalArguments =
    { about : OptionalArgument String
    , titleLanguage : OptionalArgument AniList.Enum.UserTitleLanguage.UserTitleLanguage
    , displayAdultContent : OptionalArgument Bool
    , airingNotifications : OptionalArgument Bool
    , scoreFormat : OptionalArgument AniList.Enum.ScoreFormat.ScoreFormat
    , rowOrder : OptionalArgument String
    , profileColor : OptionalArgument String
    , donatorBadge : OptionalArgument String
    , notificationOptions : OptionalArgument (List (Maybe AniList.InputObject.NotificationOptionInput))
    , timezone : OptionalArgument String
    , activityMergeTime : OptionalArgument Int
    , animeListOptions : OptionalArgument AniList.InputObject.MediaListOptionsInput
    , mangaListOptions : OptionalArgument AniList.InputObject.MediaListOptionsInput
    , staffNameLanguage : OptionalArgument AniList.Enum.UserStaffNameLanguage.UserStaffNameLanguage
    }


{-|

  - about - User's about/bio text
  - titleLanguage - User's title language
  - displayAdultContent - If the user should see media marked as adult-only
  - airingNotifications - If the user should get notifications when a show they are watching aires
  - scoreFormat - The user's list scoring system
  - rowOrder - The user's default list order
  - profileColor - Profile highlight color
  - donatorBadge - Profile highlight color
  - notificationOptions - Notification options
  - timezone - Timezone offset format: -?HH:MM
  - activityMergeTime - Minutes between activity for them to be merged together. 0 is Never, Above 2 weeks (20160 mins) is Always.
  - animeListOptions - The user's anime list options
  - mangaListOptions - The user's anime list options
  - staffNameLanguage - The language the user wants to see staff and character names in

-}
updateUser :
    (UpdateUserOptionalArguments -> UpdateUserOptionalArguments)
    -> SelectionSet decodesTo AniList.Object.User
    -> SelectionSet (Maybe decodesTo) RootMutation
updateUser fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { about = Absent, titleLanguage = Absent, displayAdultContent = Absent, airingNotifications = Absent, scoreFormat = Absent, rowOrder = Absent, profileColor = Absent, donatorBadge = Absent, notificationOptions = Absent, timezone = Absent, activityMergeTime = Absent, animeListOptions = Absent, mangaListOptions = Absent, staffNameLanguage = Absent }

        optionalArgs____ =
            [ Argument.optional "about" filledInOptionals____.about Encode.string, Argument.optional "titleLanguage" filledInOptionals____.titleLanguage (Encode.enum AniList.Enum.UserTitleLanguage.toString), Argument.optional "displayAdultContent" filledInOptionals____.displayAdultContent Encode.bool, Argument.optional "airingNotifications" filledInOptionals____.airingNotifications Encode.bool, Argument.optional "scoreFormat" filledInOptionals____.scoreFormat (Encode.enum AniList.Enum.ScoreFormat.toString), Argument.optional "rowOrder" filledInOptionals____.rowOrder Encode.string, Argument.optional "profileColor" filledInOptionals____.profileColor Encode.string, Argument.optional "donatorBadge" filledInOptionals____.donatorBadge Encode.string, Argument.optional "notificationOptions" filledInOptionals____.notificationOptions (AniList.InputObject.encodeNotificationOptionInput |> Encode.maybe |> Encode.list), Argument.optional "timezone" filledInOptionals____.timezone Encode.string, Argument.optional "activityMergeTime" filledInOptionals____.activityMergeTime Encode.int, Argument.optional "animeListOptions" filledInOptionals____.animeListOptions AniList.InputObject.encodeMediaListOptionsInput, Argument.optional "mangaListOptions" filledInOptionals____.mangaListOptions AniList.InputObject.encodeMediaListOptionsInput, Argument.optional "staffNameLanguage" filledInOptionals____.staffNameLanguage (Encode.enum AniList.Enum.UserStaffNameLanguage.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "UpdateUser" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias SaveMediaListEntryOptionalArguments =
    { id : OptionalArgument Int
    , mediaId : OptionalArgument Int
    , status : OptionalArgument AniList.Enum.MediaListStatus.MediaListStatus
    , score : OptionalArgument Float
    , scoreRaw : OptionalArgument Int
    , progress : OptionalArgument Int
    , progressVolumes : OptionalArgument Int
    , repeat : OptionalArgument Int
    , priority : OptionalArgument Int
    , private : OptionalArgument Bool
    , notes : OptionalArgument String
    , hiddenFromStatusLists : OptionalArgument Bool
    , customLists : OptionalArgument (List (Maybe String))
    , advancedScores : OptionalArgument (List (Maybe Float))
    , startedAt : OptionalArgument AniList.InputObject.FuzzyDateInput
    , completedAt : OptionalArgument AniList.InputObject.FuzzyDateInput
    }


{-| Create or update a media list entry

  - id - The list entry id, required for updating
  - mediaId - The id of the media the entry is of
  - status - The watching/reading status
  - score - The score of the media in the user's chosen scoring method
  - scoreRaw - The score of the media in 100 point
  - progress - The amount of episodes/chapters consumed by the user
  - progressVolumes - The amount of volumes read by the user
  - repeat - The amount of times the user has rewatched/read the media
  - priority - Priority of planning
  - private - If the entry should only be visible to authenticated user
  - notes - Text notes
  - hiddenFromStatusLists - If the entry shown be hidden from non-custom lists
  - customLists - Array of custom list names which should be enabled for this entry
  - advancedScores - Array of advanced scores
  - startedAt - When the entry was started by the user
  - completedAt - When the entry was completed by the user

-}
saveMediaListEntry :
    (SaveMediaListEntryOptionalArguments -> SaveMediaListEntryOptionalArguments)
    -> SelectionSet decodesTo AniList.Object.MediaList
    -> SelectionSet (Maybe decodesTo) RootMutation
saveMediaListEntry fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { id = Absent, mediaId = Absent, status = Absent, score = Absent, scoreRaw = Absent, progress = Absent, progressVolumes = Absent, repeat = Absent, priority = Absent, private = Absent, notes = Absent, hiddenFromStatusLists = Absent, customLists = Absent, advancedScores = Absent, startedAt = Absent, completedAt = Absent }

        optionalArgs____ =
            [ Argument.optional "id" filledInOptionals____.id Encode.int, Argument.optional "mediaId" filledInOptionals____.mediaId Encode.int, Argument.optional "status" filledInOptionals____.status (Encode.enum AniList.Enum.MediaListStatus.toString), Argument.optional "score" filledInOptionals____.score Encode.float, Argument.optional "scoreRaw" filledInOptionals____.scoreRaw Encode.int, Argument.optional "progress" filledInOptionals____.progress Encode.int, Argument.optional "progressVolumes" filledInOptionals____.progressVolumes Encode.int, Argument.optional "repeat" filledInOptionals____.repeat Encode.int, Argument.optional "priority" filledInOptionals____.priority Encode.int, Argument.optional "private" filledInOptionals____.private Encode.bool, Argument.optional "notes" filledInOptionals____.notes Encode.string, Argument.optional "hiddenFromStatusLists" filledInOptionals____.hiddenFromStatusLists Encode.bool, Argument.optional "customLists" filledInOptionals____.customLists (Encode.string |> Encode.maybe |> Encode.list), Argument.optional "advancedScores" filledInOptionals____.advancedScores (Encode.float |> Encode.maybe |> Encode.list), Argument.optional "startedAt" filledInOptionals____.startedAt AniList.InputObject.encodeFuzzyDateInput, Argument.optional "completedAt" filledInOptionals____.completedAt AniList.InputObject.encodeFuzzyDateInput ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "SaveMediaListEntry" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias UpdateMediaListEntriesOptionalArguments =
    { status : OptionalArgument AniList.Enum.MediaListStatus.MediaListStatus
    , score : OptionalArgument Float
    , scoreRaw : OptionalArgument Int
    , progress : OptionalArgument Int
    , progressVolumes : OptionalArgument Int
    , repeat : OptionalArgument Int
    , priority : OptionalArgument Int
    , private : OptionalArgument Bool
    , notes : OptionalArgument String
    , hiddenFromStatusLists : OptionalArgument Bool
    , advancedScores : OptionalArgument (List (Maybe Float))
    , startedAt : OptionalArgument AniList.InputObject.FuzzyDateInput
    , completedAt : OptionalArgument AniList.InputObject.FuzzyDateInput
    , ids : OptionalArgument (List (Maybe Int))
    }


{-| Update multiple media list entries to the same values

  - status - The watching/reading status
  - score - The score of the media in the user's chosen scoring method
  - scoreRaw - The score of the media in 100 point
  - progress - The amount of episodes/chapters consumed by the user
  - progressVolumes - The amount of volumes read by the user
  - repeat - The amount of times the user has rewatched/read the media
  - priority - Priority of planning
  - private - If the entry should only be visible to authenticated user
  - notes - Text notes
  - hiddenFromStatusLists - If the entry shown be hidden from non-custom lists
  - advancedScores - Array of advanced scores
  - startedAt - When the entry was started by the user
  - completedAt - When the entry was completed by the user
  - ids - The list entries ids to update

-}
updateMediaListEntries :
    (UpdateMediaListEntriesOptionalArguments -> UpdateMediaListEntriesOptionalArguments)
    -> SelectionSet decodesTo AniList.Object.MediaList
    -> SelectionSet (Maybe (List (Maybe decodesTo))) RootMutation
updateMediaListEntries fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { status = Absent, score = Absent, scoreRaw = Absent, progress = Absent, progressVolumes = Absent, repeat = Absent, priority = Absent, private = Absent, notes = Absent, hiddenFromStatusLists = Absent, advancedScores = Absent, startedAt = Absent, completedAt = Absent, ids = Absent }

        optionalArgs____ =
            [ Argument.optional "status" filledInOptionals____.status (Encode.enum AniList.Enum.MediaListStatus.toString), Argument.optional "score" filledInOptionals____.score Encode.float, Argument.optional "scoreRaw" filledInOptionals____.scoreRaw Encode.int, Argument.optional "progress" filledInOptionals____.progress Encode.int, Argument.optional "progressVolumes" filledInOptionals____.progressVolumes Encode.int, Argument.optional "repeat" filledInOptionals____.repeat Encode.int, Argument.optional "priority" filledInOptionals____.priority Encode.int, Argument.optional "private" filledInOptionals____.private Encode.bool, Argument.optional "notes" filledInOptionals____.notes Encode.string, Argument.optional "hiddenFromStatusLists" filledInOptionals____.hiddenFromStatusLists Encode.bool, Argument.optional "advancedScores" filledInOptionals____.advancedScores (Encode.float |> Encode.maybe |> Encode.list), Argument.optional "startedAt" filledInOptionals____.startedAt AniList.InputObject.encodeFuzzyDateInput, Argument.optional "completedAt" filledInOptionals____.completedAt AniList.InputObject.encodeFuzzyDateInput, Argument.optional "ids" filledInOptionals____.ids (Encode.int |> Encode.maybe |> Encode.list) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "UpdateMediaListEntries" optionalArgs____ object____ (Basics.identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias DeleteMediaListEntryOptionalArguments =
    { id : OptionalArgument Int }


{-| Delete a media list entry

  - id - The id of the media list entry to delete

-}
deleteMediaListEntry :
    (DeleteMediaListEntryOptionalArguments -> DeleteMediaListEntryOptionalArguments)
    -> SelectionSet decodesTo AniList.Object.Deleted
    -> SelectionSet (Maybe decodesTo) RootMutation
deleteMediaListEntry fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { id = Absent }

        optionalArgs____ =
            [ Argument.optional "id" filledInOptionals____.id Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "DeleteMediaListEntry" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias DeleteCustomListOptionalArguments =
    { customList : OptionalArgument String
    , type_ : OptionalArgument AniList.Enum.MediaType.MediaType
    }


{-| Delete a custom list and remove the list entries from it

  - customList - The name of the custom list to delete
  - type\_ - The media list type of the custom list

-}
deleteCustomList :
    (DeleteCustomListOptionalArguments -> DeleteCustomListOptionalArguments)
    -> SelectionSet decodesTo AniList.Object.Deleted
    -> SelectionSet (Maybe decodesTo) RootMutation
deleteCustomList fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { customList = Absent, type_ = Absent }

        optionalArgs____ =
            [ Argument.optional "customList" filledInOptionals____.customList Encode.string, Argument.optional "type" filledInOptionals____.type_ (Encode.enum AniList.Enum.MediaType.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "DeleteCustomList" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias SaveTextActivityOptionalArguments =
    { id : OptionalArgument Int
    , text : OptionalArgument String
    , locked : OptionalArgument Bool
    }


{-| Create or update text activity for the currently authenticated user

  - id - The activity's id, required for updating
  - text - The activity text
  - locked - If the activity should be locked. (Mod Only)

-}
saveTextActivity :
    (SaveTextActivityOptionalArguments -> SaveTextActivityOptionalArguments)
    -> SelectionSet decodesTo AniList.Object.TextActivity
    -> SelectionSet (Maybe decodesTo) RootMutation
saveTextActivity fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { id = Absent, text = Absent, locked = Absent }

        optionalArgs____ =
            [ Argument.optional "id" filledInOptionals____.id Encode.int, Argument.optional "text" filledInOptionals____.text Encode.string, Argument.optional "locked" filledInOptionals____.locked Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "SaveTextActivity" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias SaveMessageActivityOptionalArguments =
    { id : OptionalArgument Int
    , message : OptionalArgument String
    , recipientId : OptionalArgument Int
    , private : OptionalArgument Bool
    , locked : OptionalArgument Bool
    , asMod : OptionalArgument Bool
    }


{-| Create or update message activity for the currently authenticated user

  - id - The activity id, required for updating
  - message - The activity message text
  - recipientId - The id of the user the message is being sent to
  - private - If the activity should be private
  - locked - If the activity should be locked. (Mod Only)
  - asMod - If the message should be sent from the Moderator account (Mod Only)

-}
saveMessageActivity :
    (SaveMessageActivityOptionalArguments -> SaveMessageActivityOptionalArguments)
    -> SelectionSet decodesTo AniList.Object.MessageActivity
    -> SelectionSet (Maybe decodesTo) RootMutation
saveMessageActivity fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { id = Absent, message = Absent, recipientId = Absent, private = Absent, locked = Absent, asMod = Absent }

        optionalArgs____ =
            [ Argument.optional "id" filledInOptionals____.id Encode.int, Argument.optional "message" filledInOptionals____.message Encode.string, Argument.optional "recipientId" filledInOptionals____.recipientId Encode.int, Argument.optional "private" filledInOptionals____.private Encode.bool, Argument.optional "locked" filledInOptionals____.locked Encode.bool, Argument.optional "asMod" filledInOptionals____.asMod Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "SaveMessageActivity" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias SaveListActivityOptionalArguments =
    { id : OptionalArgument Int
    , locked : OptionalArgument Bool
    }


{-| Update list activity (Mod Only)

  - id - The activity's id, required for updating
  - locked - If the activity should be locked. (Mod Only)

-}
saveListActivity :
    (SaveListActivityOptionalArguments -> SaveListActivityOptionalArguments)
    -> SelectionSet decodesTo AniList.Object.ListActivity
    -> SelectionSet (Maybe decodesTo) RootMutation
saveListActivity fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { id = Absent, locked = Absent }

        optionalArgs____ =
            [ Argument.optional "id" filledInOptionals____.id Encode.int, Argument.optional "locked" filledInOptionals____.locked Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "SaveListActivity" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias DeleteActivityOptionalArguments =
    { id : OptionalArgument Int }


{-| Delete an activity item of the authenticated users

  - id - The id of the activity to delete

-}
deleteActivity :
    (DeleteActivityOptionalArguments -> DeleteActivityOptionalArguments)
    -> SelectionSet decodesTo AniList.Object.Deleted
    -> SelectionSet (Maybe decodesTo) RootMutation
deleteActivity fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { id = Absent }

        optionalArgs____ =
            [ Argument.optional "id" filledInOptionals____.id Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "DeleteActivity" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias ToggleActivitySubscriptionOptionalArguments =
    { activityId : OptionalArgument Int
    , subscribe : OptionalArgument Bool
    }


{-| Toggle the subscription of an activity item

  - activityId - The id of the activity to un/subscribe
  - subscribe - Whether to subscribe or unsubscribe from the activity

-}
toggleActivitySubscription :
    (ToggleActivitySubscriptionOptionalArguments -> ToggleActivitySubscriptionOptionalArguments)
    -> SelectionSet decodesTo AniList.Union.ActivityUnion
    -> SelectionSet (Maybe decodesTo) RootMutation
toggleActivitySubscription fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { activityId = Absent, subscribe = Absent }

        optionalArgs____ =
            [ Argument.optional "activityId" filledInOptionals____.activityId Encode.int, Argument.optional "subscribe" filledInOptionals____.subscribe Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "ToggleActivitySubscription" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias SaveActivityReplyOptionalArguments =
    { id : OptionalArgument Int
    , activityId : OptionalArgument Int
    , text : OptionalArgument String
    , asMod : OptionalArgument Bool
    }


{-| Create or update an activity reply

  - id - The activity reply id, required for updating
  - activityId - The id of the parent activity being replied to
  - text - The reply text
  - asMod - If the reply should be sent from the Moderator account (Mod Only)

-}
saveActivityReply :
    (SaveActivityReplyOptionalArguments -> SaveActivityReplyOptionalArguments)
    -> SelectionSet decodesTo AniList.Object.ActivityReply
    -> SelectionSet (Maybe decodesTo) RootMutation
saveActivityReply fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { id = Absent, activityId = Absent, text = Absent, asMod = Absent }

        optionalArgs____ =
            [ Argument.optional "id" filledInOptionals____.id Encode.int, Argument.optional "activityId" filledInOptionals____.activityId Encode.int, Argument.optional "text" filledInOptionals____.text Encode.string, Argument.optional "asMod" filledInOptionals____.asMod Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "SaveActivityReply" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias DeleteActivityReplyOptionalArguments =
    { id : OptionalArgument Int }


{-| Delete an activity reply of the authenticated users

  - id - The id of the reply to delete

-}
deleteActivityReply :
    (DeleteActivityReplyOptionalArguments -> DeleteActivityReplyOptionalArguments)
    -> SelectionSet decodesTo AniList.Object.Deleted
    -> SelectionSet (Maybe decodesTo) RootMutation
deleteActivityReply fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { id = Absent }

        optionalArgs____ =
            [ Argument.optional "id" filledInOptionals____.id Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "DeleteActivityReply" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias ToggleLikeOptionalArguments =
    { id : OptionalArgument Int
    , type_ : OptionalArgument AniList.Enum.LikeableType.LikeableType
    }


{-| Add or remove a like from a likeable type.
Returns all the users who liked the same model

  - id - The id of the likeable type
  - type\_ - The type of model to be un/liked

-}
toggleLike :
    (ToggleLikeOptionalArguments -> ToggleLikeOptionalArguments)
    -> SelectionSet decodesTo AniList.Object.User
    -> SelectionSet (Maybe (List (Maybe decodesTo))) RootMutation
toggleLike fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { id = Absent, type_ = Absent }

        optionalArgs____ =
            [ Argument.optional "id" filledInOptionals____.id Encode.int, Argument.optional "type" filledInOptionals____.type_ (Encode.enum AniList.Enum.LikeableType.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "ToggleLike" optionalArgs____ object____ (Basics.identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias ToggleLikeV2OptionalArguments =
    { id : OptionalArgument Int
    , type_ : OptionalArgument AniList.Enum.LikeableType.LikeableType
    }


{-| Add or remove a like from a likeable type.

  - id - The id of the likeable type
  - type\_ - The type of model to be un/liked

-}
toggleLikeV2 :
    (ToggleLikeV2OptionalArguments -> ToggleLikeV2OptionalArguments)
    -> SelectionSet decodesTo AniList.Union.LikeableUnion
    -> SelectionSet (Maybe decodesTo) RootMutation
toggleLikeV2 fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { id = Absent, type_ = Absent }

        optionalArgs____ =
            [ Argument.optional "id" filledInOptionals____.id Encode.int, Argument.optional "type" filledInOptionals____.type_ (Encode.enum AniList.Enum.LikeableType.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "ToggleLikeV2" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias ToggleFollowOptionalArguments =
    { userId : OptionalArgument Int }


{-| Toggle the un/following of a user

  - userId - The id of the user to un/follow

-}
toggleFollow :
    (ToggleFollowOptionalArguments -> ToggleFollowOptionalArguments)
    -> SelectionSet decodesTo AniList.Object.User
    -> SelectionSet (Maybe decodesTo) RootMutation
toggleFollow fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { userId = Absent }

        optionalArgs____ =
            [ Argument.optional "userId" filledInOptionals____.userId Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "ToggleFollow" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias ToggleFavouriteOptionalArguments =
    { animeId : OptionalArgument Int
    , mangaId : OptionalArgument Int
    , characterId : OptionalArgument Int
    , staffId : OptionalArgument Int
    , studioId : OptionalArgument Int
    }


{-| Favourite or unfavourite an anime, manga, character, staff member, or studio

  - animeId - The id of the anime to un/favourite
  - mangaId - The id of the manga to un/favourite
  - characterId - The id of the character to un/favourite
  - staffId - The id of the staff to un/favourite
  - studioId - The id of the studio to un/favourite

-}
toggleFavourite :
    (ToggleFavouriteOptionalArguments -> ToggleFavouriteOptionalArguments)
    -> SelectionSet decodesTo AniList.Object.Favourites
    -> SelectionSet (Maybe decodesTo) RootMutation
toggleFavourite fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { animeId = Absent, mangaId = Absent, characterId = Absent, staffId = Absent, studioId = Absent }

        optionalArgs____ =
            [ Argument.optional "animeId" filledInOptionals____.animeId Encode.int, Argument.optional "mangaId" filledInOptionals____.mangaId Encode.int, Argument.optional "characterId" filledInOptionals____.characterId Encode.int, Argument.optional "staffId" filledInOptionals____.staffId Encode.int, Argument.optional "studioId" filledInOptionals____.studioId Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "ToggleFavourite" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias UpdateFavouriteOrderOptionalArguments =
    { animeIds : OptionalArgument (List (Maybe Int))
    , mangaIds : OptionalArgument (List (Maybe Int))
    , characterIds : OptionalArgument (List (Maybe Int))
    , staffIds : OptionalArgument (List (Maybe Int))
    , studioIds : OptionalArgument (List (Maybe Int))
    , animeOrder : OptionalArgument (List (Maybe Int))
    , mangaOrder : OptionalArgument (List (Maybe Int))
    , characterOrder : OptionalArgument (List (Maybe Int))
    , staffOrder : OptionalArgument (List (Maybe Int))
    , studioOrder : OptionalArgument (List (Maybe Int))
    }


{-| Update the order favourites are displayed in

  - animeIds - The id of the anime to un/favourite
  - mangaIds - The id of the manga to un/favourite
  - characterIds - The id of the character to un/favourite
  - staffIds - The id of the staff to un/favourite
  - studioIds - The id of the studio to un/favourite
  - animeOrder - List of integers which the anime should be ordered by (Asc)
  - mangaOrder - List of integers which the manga should be ordered by (Asc)
  - characterOrder - List of integers which the character should be ordered by (Asc)
  - staffOrder - List of integers which the staff should be ordered by (Asc)
  - studioOrder - List of integers which the studio should be ordered by (Asc)

-}
updateFavouriteOrder :
    (UpdateFavouriteOrderOptionalArguments -> UpdateFavouriteOrderOptionalArguments)
    -> SelectionSet decodesTo AniList.Object.Favourites
    -> SelectionSet (Maybe decodesTo) RootMutation
updateFavouriteOrder fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { animeIds = Absent, mangaIds = Absent, characterIds = Absent, staffIds = Absent, studioIds = Absent, animeOrder = Absent, mangaOrder = Absent, characterOrder = Absent, staffOrder = Absent, studioOrder = Absent }

        optionalArgs____ =
            [ Argument.optional "animeIds" filledInOptionals____.animeIds (Encode.int |> Encode.maybe |> Encode.list), Argument.optional "mangaIds" filledInOptionals____.mangaIds (Encode.int |> Encode.maybe |> Encode.list), Argument.optional "characterIds" filledInOptionals____.characterIds (Encode.int |> Encode.maybe |> Encode.list), Argument.optional "staffIds" filledInOptionals____.staffIds (Encode.int |> Encode.maybe |> Encode.list), Argument.optional "studioIds" filledInOptionals____.studioIds (Encode.int |> Encode.maybe |> Encode.list), Argument.optional "animeOrder" filledInOptionals____.animeOrder (Encode.int |> Encode.maybe |> Encode.list), Argument.optional "mangaOrder" filledInOptionals____.mangaOrder (Encode.int |> Encode.maybe |> Encode.list), Argument.optional "characterOrder" filledInOptionals____.characterOrder (Encode.int |> Encode.maybe |> Encode.list), Argument.optional "staffOrder" filledInOptionals____.staffOrder (Encode.int |> Encode.maybe |> Encode.list), Argument.optional "studioOrder" filledInOptionals____.studioOrder (Encode.int |> Encode.maybe |> Encode.list) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "UpdateFavouriteOrder" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias SaveReviewOptionalArguments =
    { id : OptionalArgument Int
    , mediaId : OptionalArgument Int
    , body : OptionalArgument String
    , summary : OptionalArgument String
    , score : OptionalArgument Int
    , private : OptionalArgument Bool
    }


{-| Create or update a review

  - id - The review id, required for updating
  - mediaId - The id of the media the review is of
  - body - The main review text. Min:2200 characters
  - summary - A short summary/preview of the review. Min:20, Max:120 characters
  - score - A short summary/preview of the review. Min:20, Max:120 characters
  - private - If the review should only be visible to its creator

-}
saveReview :
    (SaveReviewOptionalArguments -> SaveReviewOptionalArguments)
    -> SelectionSet decodesTo AniList.Object.Review
    -> SelectionSet (Maybe decodesTo) RootMutation
saveReview fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { id = Absent, mediaId = Absent, body = Absent, summary = Absent, score = Absent, private = Absent }

        optionalArgs____ =
            [ Argument.optional "id" filledInOptionals____.id Encode.int, Argument.optional "mediaId" filledInOptionals____.mediaId Encode.int, Argument.optional "body" filledInOptionals____.body Encode.string, Argument.optional "summary" filledInOptionals____.summary Encode.string, Argument.optional "score" filledInOptionals____.score Encode.int, Argument.optional "private" filledInOptionals____.private Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "SaveReview" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias DeleteReviewOptionalArguments =
    { id : OptionalArgument Int }


{-| Delete a review

  - id - The id of the review to delete

-}
deleteReview :
    (DeleteReviewOptionalArguments -> DeleteReviewOptionalArguments)
    -> SelectionSet decodesTo AniList.Object.Deleted
    -> SelectionSet (Maybe decodesTo) RootMutation
deleteReview fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { id = Absent }

        optionalArgs____ =
            [ Argument.optional "id" filledInOptionals____.id Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "DeleteReview" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias RateReviewOptionalArguments =
    { reviewId : OptionalArgument Int
    , rating : OptionalArgument AniList.Enum.ReviewRating.ReviewRating
    }


{-| Rate a review

  - reviewId - The id of the review to rate
  - rating - The rating to apply to the review

-}
rateReview :
    (RateReviewOptionalArguments -> RateReviewOptionalArguments)
    -> SelectionSet decodesTo AniList.Object.Review
    -> SelectionSet (Maybe decodesTo) RootMutation
rateReview fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { reviewId = Absent, rating = Absent }

        optionalArgs____ =
            [ Argument.optional "reviewId" filledInOptionals____.reviewId Encode.int, Argument.optional "rating" filledInOptionals____.rating (Encode.enum AniList.Enum.ReviewRating.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "RateReview" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias SaveRecommendationOptionalArguments =
    { mediaId : OptionalArgument Int
    , mediaRecommendationId : OptionalArgument Int
    , rating : OptionalArgument AniList.Enum.RecommendationRating.RecommendationRating
    }


{-| Recommendation a media

  - mediaId - The id of the base media
  - mediaRecommendationId - The id of the media to recommend
  - rating - The rating to give the recommendation

-}
saveRecommendation :
    (SaveRecommendationOptionalArguments -> SaveRecommendationOptionalArguments)
    -> SelectionSet decodesTo AniList.Object.Recommendation
    -> SelectionSet (Maybe decodesTo) RootMutation
saveRecommendation fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { mediaId = Absent, mediaRecommendationId = Absent, rating = Absent }

        optionalArgs____ =
            [ Argument.optional "mediaId" filledInOptionals____.mediaId Encode.int, Argument.optional "mediaRecommendationId" filledInOptionals____.mediaRecommendationId Encode.int, Argument.optional "rating" filledInOptionals____.rating (Encode.enum AniList.Enum.RecommendationRating.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "SaveRecommendation" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias SaveThreadOptionalArguments =
    { id : OptionalArgument Int
    , title : OptionalArgument String
    , body : OptionalArgument String
    , categories : OptionalArgument (List (Maybe Int))
    , mediaCategories : OptionalArgument (List (Maybe Int))
    , sticky : OptionalArgument Bool
    , locked : OptionalArgument Bool
    }


{-| Create or update a forum thread

  - id - The thread id, required for updating
  - title - The title of the thread
  - body - The main text body of the thread
  - categories - Forum categories the thread should be within
  - mediaCategories - Media related to the contents of the thread
  - sticky - If the thread should be stickied. (Mod Only)
  - locked - If the thread should be locked. (Mod Only)

-}
saveThread :
    (SaveThreadOptionalArguments -> SaveThreadOptionalArguments)
    -> SelectionSet decodesTo AniList.Object.Thread
    -> SelectionSet (Maybe decodesTo) RootMutation
saveThread fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { id = Absent, title = Absent, body = Absent, categories = Absent, mediaCategories = Absent, sticky = Absent, locked = Absent }

        optionalArgs____ =
            [ Argument.optional "id" filledInOptionals____.id Encode.int, Argument.optional "title" filledInOptionals____.title Encode.string, Argument.optional "body" filledInOptionals____.body Encode.string, Argument.optional "categories" filledInOptionals____.categories (Encode.int |> Encode.maybe |> Encode.list), Argument.optional "mediaCategories" filledInOptionals____.mediaCategories (Encode.int |> Encode.maybe |> Encode.list), Argument.optional "sticky" filledInOptionals____.sticky Encode.bool, Argument.optional "locked" filledInOptionals____.locked Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "SaveThread" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias DeleteThreadOptionalArguments =
    { id : OptionalArgument Int }


{-| Delete a thread

  - id - The id of the thread to delete

-}
deleteThread :
    (DeleteThreadOptionalArguments -> DeleteThreadOptionalArguments)
    -> SelectionSet decodesTo AniList.Object.Deleted
    -> SelectionSet (Maybe decodesTo) RootMutation
deleteThread fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { id = Absent }

        optionalArgs____ =
            [ Argument.optional "id" filledInOptionals____.id Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "DeleteThread" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias ToggleThreadSubscriptionOptionalArguments =
    { threadId : OptionalArgument Int
    , subscribe : OptionalArgument Bool
    }


{-| Toggle the subscription of a forum thread

  - threadId - The id of the forum thread to un/subscribe
  - subscribe - Whether to subscribe or unsubscribe from the forum thread

-}
toggleThreadSubscription :
    (ToggleThreadSubscriptionOptionalArguments -> ToggleThreadSubscriptionOptionalArguments)
    -> SelectionSet decodesTo AniList.Object.Thread
    -> SelectionSet (Maybe decodesTo) RootMutation
toggleThreadSubscription fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { threadId = Absent, subscribe = Absent }

        optionalArgs____ =
            [ Argument.optional "threadId" filledInOptionals____.threadId Encode.int, Argument.optional "subscribe" filledInOptionals____.subscribe Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "ToggleThreadSubscription" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias SaveThreadCommentOptionalArguments =
    { id : OptionalArgument Int
    , threadId : OptionalArgument Int
    , parentCommentId : OptionalArgument Int
    , comment : OptionalArgument String
    }


{-| Create or update a thread comment

  - id - The comment id, required for updating
  - threadId - The id of thread the comment belongs to
  - parentCommentId - The id of thread comment to reply to
  - comment - The comment markdown text

-}
saveThreadComment :
    (SaveThreadCommentOptionalArguments -> SaveThreadCommentOptionalArguments)
    -> SelectionSet decodesTo AniList.Object.ThreadComment
    -> SelectionSet (Maybe decodesTo) RootMutation
saveThreadComment fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { id = Absent, threadId = Absent, parentCommentId = Absent, comment = Absent }

        optionalArgs____ =
            [ Argument.optional "id" filledInOptionals____.id Encode.int, Argument.optional "threadId" filledInOptionals____.threadId Encode.int, Argument.optional "parentCommentId" filledInOptionals____.parentCommentId Encode.int, Argument.optional "comment" filledInOptionals____.comment Encode.string ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "SaveThreadComment" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias DeleteThreadCommentOptionalArguments =
    { id : OptionalArgument Int }


{-| Delete a thread comment

  - id - The id of the thread comment to delete

-}
deleteThreadComment :
    (DeleteThreadCommentOptionalArguments -> DeleteThreadCommentOptionalArguments)
    -> SelectionSet decodesTo AniList.Object.Deleted
    -> SelectionSet (Maybe decodesTo) RootMutation
deleteThreadComment fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { id = Absent }

        optionalArgs____ =
            [ Argument.optional "id" filledInOptionals____.id Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "DeleteThreadComment" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias UpdateAniChartSettingsOptionalArguments =
    { titleLanguage : OptionalArgument String
    , outgoingLinkProvider : OptionalArgument String
    , theme : OptionalArgument String
    , sort : OptionalArgument String
    }


updateAniChartSettings :
    (UpdateAniChartSettingsOptionalArguments -> UpdateAniChartSettingsOptionalArguments)
    -> SelectionSet (Maybe AniList.ScalarCodecs.Json) RootMutation
updateAniChartSettings fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { titleLanguage = Absent, outgoingLinkProvider = Absent, theme = Absent, sort = Absent }

        optionalArgs____ =
            [ Argument.optional "titleLanguage" filledInOptionals____.titleLanguage Encode.string, Argument.optional "outgoingLinkProvider" filledInOptionals____.outgoingLinkProvider Encode.string, Argument.optional "theme" filledInOptionals____.theme Encode.string, Argument.optional "sort" filledInOptionals____.sort Encode.string ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForField "(Maybe ScalarCodecs.Json)" "UpdateAniChartSettings" optionalArgs____ (AniList.ScalarCodecs.codecs |> AniList.Scalar.unwrapCodecs |> .codecJson |> .decoder |> Decode.nullable)


type alias UpdateAniChartHighlightsOptionalArguments =
    { highlights : OptionalArgument (List (Maybe AniList.InputObject.AniChartHighlightInput)) }


updateAniChartHighlights :
    (UpdateAniChartHighlightsOptionalArguments -> UpdateAniChartHighlightsOptionalArguments)
    -> SelectionSet (Maybe AniList.ScalarCodecs.Json) RootMutation
updateAniChartHighlights fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { highlights = Absent }

        optionalArgs____ =
            [ Argument.optional "highlights" filledInOptionals____.highlights (AniList.InputObject.encodeAniChartHighlightInput |> Encode.maybe |> Encode.list) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForField "(Maybe ScalarCodecs.Json)" "UpdateAniChartHighlights" optionalArgs____ (AniList.ScalarCodecs.codecs |> AniList.Scalar.unwrapCodecs |> .codecJson |> .decoder |> Decode.nullable)
