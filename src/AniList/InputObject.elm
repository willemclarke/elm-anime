-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module AniList.InputObject exposing (..)

import AniList.Enum.NotificationType
import AniList.Interface
import AniList.Object
import AniList.Scalar
import AniList.ScalarCodecs
import AniList.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildAiringScheduleInput :
    (AiringScheduleInputOptionalFields -> AiringScheduleInputOptionalFields)
    -> AiringScheduleInput
buildAiringScheduleInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { airingAt = Absent, episode = Absent, timeUntilAiring = Absent }
    in
    { airingAt = optionals____.airingAt, episode = optionals____.episode, timeUntilAiring = optionals____.timeUntilAiring }


type alias AiringScheduleInputOptionalFields =
    { airingAt : OptionalArgument Int
    , episode : OptionalArgument Int
    , timeUntilAiring : OptionalArgument Int
    }


{-| Type for the AiringScheduleInput input object.
-}
type alias AiringScheduleInput =
    { airingAt : OptionalArgument Int
    , episode : OptionalArgument Int
    , timeUntilAiring : OptionalArgument Int
    }


{-| Encode a AiringScheduleInput into a value that can be used as an argument.
-}
encodeAiringScheduleInput : AiringScheduleInput -> Value
encodeAiringScheduleInput input____ =
    Encode.maybeObject
        [ ( "airingAt", Encode.int |> Encode.optional input____.airingAt ), ( "episode", Encode.int |> Encode.optional input____.episode ), ( "timeUntilAiring", Encode.int |> Encode.optional input____.timeUntilAiring ) ]


buildAniChartHighlightInput :
    (AniChartHighlightInputOptionalFields -> AniChartHighlightInputOptionalFields)
    -> AniChartHighlightInput
buildAniChartHighlightInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { mediaId = Absent, highlight = Absent }
    in
    { mediaId = optionals____.mediaId, highlight = optionals____.highlight }


type alias AniChartHighlightInputOptionalFields =
    { mediaId : OptionalArgument Int
    , highlight : OptionalArgument String
    }


{-| Type for the AniChartHighlightInput input object.
-}
type alias AniChartHighlightInput =
    { mediaId : OptionalArgument Int
    , highlight : OptionalArgument String
    }


{-| Encode a AniChartHighlightInput into a value that can be used as an argument.
-}
encodeAniChartHighlightInput : AniChartHighlightInput -> Value
encodeAniChartHighlightInput input____ =
    Encode.maybeObject
        [ ( "mediaId", Encode.int |> Encode.optional input____.mediaId ), ( "highlight", Encode.string |> Encode.optional input____.highlight ) ]


buildCharacterNameInput :
    (CharacterNameInputOptionalFields -> CharacterNameInputOptionalFields)
    -> CharacterNameInput
buildCharacterNameInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { first = Absent, middle = Absent, last = Absent, native = Absent, alternative = Absent, alternativeSpoiler = Absent }
    in
    { first = optionals____.first, middle = optionals____.middle, last = optionals____.last, native = optionals____.native, alternative = optionals____.alternative, alternativeSpoiler = optionals____.alternativeSpoiler }


type alias CharacterNameInputOptionalFields =
    { first : OptionalArgument String
    , middle : OptionalArgument String
    , last : OptionalArgument String
    , native : OptionalArgument String
    , alternative : OptionalArgument (List (Maybe String))
    , alternativeSpoiler : OptionalArgument (List (Maybe String))
    }


{-| Type for the CharacterNameInput input object.
-}
type alias CharacterNameInput =
    { first : OptionalArgument String
    , middle : OptionalArgument String
    , last : OptionalArgument String
    , native : OptionalArgument String
    , alternative : OptionalArgument (List (Maybe String))
    , alternativeSpoiler : OptionalArgument (List (Maybe String))
    }


{-| Encode a CharacterNameInput into a value that can be used as an argument.
-}
encodeCharacterNameInput : CharacterNameInput -> Value
encodeCharacterNameInput input____ =
    Encode.maybeObject
        [ ( "first", Encode.string |> Encode.optional input____.first ), ( "middle", Encode.string |> Encode.optional input____.middle ), ( "last", Encode.string |> Encode.optional input____.last ), ( "native", Encode.string |> Encode.optional input____.native ), ( "alternative", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input____.alternative ), ( "alternativeSpoiler", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input____.alternativeSpoiler ) ]


buildFuzzyDateInput :
    (FuzzyDateInputOptionalFields -> FuzzyDateInputOptionalFields)
    -> FuzzyDateInput
buildFuzzyDateInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { year = Absent, month = Absent, day = Absent }
    in
    { year = optionals____.year, month = optionals____.month, day = optionals____.day }


type alias FuzzyDateInputOptionalFields =
    { year : OptionalArgument Int
    , month : OptionalArgument Int
    , day : OptionalArgument Int
    }


{-| Type for the FuzzyDateInput input object.
-}
type alias FuzzyDateInput =
    { year : OptionalArgument Int
    , month : OptionalArgument Int
    , day : OptionalArgument Int
    }


{-| Encode a FuzzyDateInput into a value that can be used as an argument.
-}
encodeFuzzyDateInput : FuzzyDateInput -> Value
encodeFuzzyDateInput input____ =
    Encode.maybeObject
        [ ( "year", Encode.int |> Encode.optional input____.year ), ( "month", Encode.int |> Encode.optional input____.month ), ( "day", Encode.int |> Encode.optional input____.day ) ]


buildMediaExternalLinkInput :
    MediaExternalLinkInputRequiredFields
    -> MediaExternalLinkInput
buildMediaExternalLinkInput required____ =
    { id = required____.id, url = required____.url, site = required____.site }


type alias MediaExternalLinkInputRequiredFields =
    { id : Int
    , url : String
    , site : String
    }


{-| Type for the MediaExternalLinkInput input object.
-}
type alias MediaExternalLinkInput =
    { id : Int
    , url : String
    , site : String
    }


{-| Encode a MediaExternalLinkInput into a value that can be used as an argument.
-}
encodeMediaExternalLinkInput : MediaExternalLinkInput -> Value
encodeMediaExternalLinkInput input____ =
    Encode.maybeObject
        [ ( "id", Encode.int input____.id |> Just ), ( "url", Encode.string input____.url |> Just ), ( "site", Encode.string input____.site |> Just ) ]


buildMediaListOptionsInput :
    (MediaListOptionsInputOptionalFields -> MediaListOptionsInputOptionalFields)
    -> MediaListOptionsInput
buildMediaListOptionsInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { sectionOrder = Absent, splitCompletedSectionByFormat = Absent, customLists = Absent, advancedScoring = Absent, advancedScoringEnabled = Absent, theme = Absent }
    in
    { sectionOrder = optionals____.sectionOrder, splitCompletedSectionByFormat = optionals____.splitCompletedSectionByFormat, customLists = optionals____.customLists, advancedScoring = optionals____.advancedScoring, advancedScoringEnabled = optionals____.advancedScoringEnabled, theme = optionals____.theme }


type alias MediaListOptionsInputOptionalFields =
    { sectionOrder : OptionalArgument (List (Maybe String))
    , splitCompletedSectionByFormat : OptionalArgument Bool
    , customLists : OptionalArgument (List (Maybe String))
    , advancedScoring : OptionalArgument (List (Maybe String))
    , advancedScoringEnabled : OptionalArgument Bool
    , theme : OptionalArgument String
    }


{-| Type for the MediaListOptionsInput input object.
-}
type alias MediaListOptionsInput =
    { sectionOrder : OptionalArgument (List (Maybe String))
    , splitCompletedSectionByFormat : OptionalArgument Bool
    , customLists : OptionalArgument (List (Maybe String))
    , advancedScoring : OptionalArgument (List (Maybe String))
    , advancedScoringEnabled : OptionalArgument Bool
    , theme : OptionalArgument String
    }


{-| Encode a MediaListOptionsInput into a value that can be used as an argument.
-}
encodeMediaListOptionsInput : MediaListOptionsInput -> Value
encodeMediaListOptionsInput input____ =
    Encode.maybeObject
        [ ( "sectionOrder", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input____.sectionOrder ), ( "splitCompletedSectionByFormat", Encode.bool |> Encode.optional input____.splitCompletedSectionByFormat ), ( "customLists", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input____.customLists ), ( "advancedScoring", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input____.advancedScoring ), ( "advancedScoringEnabled", Encode.bool |> Encode.optional input____.advancedScoringEnabled ), ( "theme", Encode.string |> Encode.optional input____.theme ) ]


buildMediaTitleInput :
    (MediaTitleInputOptionalFields -> MediaTitleInputOptionalFields)
    -> MediaTitleInput
buildMediaTitleInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { romaji = Absent, english = Absent, native = Absent }
    in
    { romaji = optionals____.romaji, english = optionals____.english, native = optionals____.native }


type alias MediaTitleInputOptionalFields =
    { romaji : OptionalArgument String
    , english : OptionalArgument String
    , native : OptionalArgument String
    }


{-| Type for the MediaTitleInput input object.
-}
type alias MediaTitleInput =
    { romaji : OptionalArgument String
    , english : OptionalArgument String
    , native : OptionalArgument String
    }


{-| Encode a MediaTitleInput into a value that can be used as an argument.
-}
encodeMediaTitleInput : MediaTitleInput -> Value
encodeMediaTitleInput input____ =
    Encode.maybeObject
        [ ( "romaji", Encode.string |> Encode.optional input____.romaji ), ( "english", Encode.string |> Encode.optional input____.english ), ( "native", Encode.string |> Encode.optional input____.native ) ]


buildNotificationOptionInput :
    (NotificationOptionInputOptionalFields -> NotificationOptionInputOptionalFields)
    -> NotificationOptionInput
buildNotificationOptionInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { type_ = Absent, enabled = Absent }
    in
    { type_ = optionals____.type_, enabled = optionals____.enabled }


type alias NotificationOptionInputOptionalFields =
    { type_ : OptionalArgument AniList.Enum.NotificationType.NotificationType
    , enabled : OptionalArgument Bool
    }


{-| Type for the NotificationOptionInput input object.
-}
type alias NotificationOptionInput =
    { type_ : OptionalArgument AniList.Enum.NotificationType.NotificationType
    , enabled : OptionalArgument Bool
    }


{-| Encode a NotificationOptionInput into a value that can be used as an argument.
-}
encodeNotificationOptionInput : NotificationOptionInput -> Value
encodeNotificationOptionInput input____ =
    Encode.maybeObject
        [ ( "type", Encode.enum AniList.Enum.NotificationType.toString |> Encode.optional input____.type_ ), ( "enabled", Encode.bool |> Encode.optional input____.enabled ) ]


buildStaffNameInput :
    (StaffNameInputOptionalFields -> StaffNameInputOptionalFields)
    -> StaffNameInput
buildStaffNameInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { first = Absent, middle = Absent, last = Absent, native = Absent, alternative = Absent }
    in
    { first = optionals____.first, middle = optionals____.middle, last = optionals____.last, native = optionals____.native, alternative = optionals____.alternative }


type alias StaffNameInputOptionalFields =
    { first : OptionalArgument String
    , middle : OptionalArgument String
    , last : OptionalArgument String
    , native : OptionalArgument String
    , alternative : OptionalArgument (List (Maybe String))
    }


{-| Type for the StaffNameInput input object.
-}
type alias StaffNameInput =
    { first : OptionalArgument String
    , middle : OptionalArgument String
    , last : OptionalArgument String
    , native : OptionalArgument String
    , alternative : OptionalArgument (List (Maybe String))
    }


{-| Encode a StaffNameInput into a value that can be used as an argument.
-}
encodeStaffNameInput : StaffNameInput -> Value
encodeStaffNameInput input____ =
    Encode.maybeObject
        [ ( "first", Encode.string |> Encode.optional input____.first ), ( "middle", Encode.string |> Encode.optional input____.middle ), ( "last", Encode.string |> Encode.optional input____.last ), ( "native", Encode.string |> Encode.optional input____.native ), ( "alternative", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input____.alternative ) ]
