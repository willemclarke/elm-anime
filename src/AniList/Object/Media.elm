-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module AniList.Object.Media exposing (..)

import AniList.Enum.CharacterRole
import AniList.Enum.CharacterSort
import AniList.Enum.MediaFormat
import AniList.Enum.MediaSeason
import AniList.Enum.MediaSource
import AniList.Enum.MediaStatus
import AniList.Enum.MediaTrendSort
import AniList.Enum.MediaType
import AniList.Enum.RecommendationSort
import AniList.Enum.ReviewSort
import AniList.Enum.StaffSort
import AniList.Enum.StudioSort
import AniList.InputObject
import AniList.Interface
import AniList.Object
import AniList.Scalar
import AniList.ScalarCodecs
import AniList.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| The id of the media
-}
id : SelectionSet Int AniList.Object.Media
id =
    Object.selectionForField "Int" "id" [] Decode.int


{-| The mal id of the media
-}
idMal : SelectionSet (Maybe Int) AniList.Object.Media
idMal =
    Object.selectionForField "(Maybe Int)" "idMal" [] (Decode.int |> Decode.nullable)


{-| The official titles of the media in various languages
-}
title :
    SelectionSet decodesTo AniList.Object.MediaTitle
    -> SelectionSet (Maybe decodesTo) AniList.Object.Media
title object____ =
    Object.selectionForCompositeField "title" [] object____ (Basics.identity >> Decode.nullable)


{-| The type of the media; anime or manga
-}
type_ : SelectionSet (Maybe AniList.Enum.MediaType.MediaType) AniList.Object.Media
type_ =
    Object.selectionForField "(Maybe Enum.MediaType.MediaType)" "type" [] (AniList.Enum.MediaType.decoder |> Decode.nullable)


{-| The format the media was released in
-}
format : SelectionSet (Maybe AniList.Enum.MediaFormat.MediaFormat) AniList.Object.Media
format =
    Object.selectionForField "(Maybe Enum.MediaFormat.MediaFormat)" "format" [] (AniList.Enum.MediaFormat.decoder |> Decode.nullable)


type alias StatusOptionalArguments =
    { version : OptionalArgument Int }


{-| The current releasing status of the media

  - version - Provide 2 to use new version 2 of sources enum

-}
status :
    (StatusOptionalArguments -> StatusOptionalArguments)
    -> SelectionSet (Maybe AniList.Enum.MediaStatus.MediaStatus) AniList.Object.Media
status fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { version = Absent }

        optionalArgs____ =
            [ Argument.optional "version" filledInOptionals____.version Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForField "(Maybe Enum.MediaStatus.MediaStatus)" "status" optionalArgs____ (AniList.Enum.MediaStatus.decoder |> Decode.nullable)


type alias DescriptionOptionalArguments =
    { asHtml : OptionalArgument Bool }


{-| Short description of the media's story and characters

  - asHtml - Return the string in pre-parsed html instead of markdown

-}
description :
    (DescriptionOptionalArguments -> DescriptionOptionalArguments)
    -> SelectionSet (Maybe String) AniList.Object.Media
description fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { asHtml = Absent }

        optionalArgs____ =
            [ Argument.optional "asHtml" filledInOptionals____.asHtml Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForField "(Maybe String)" "description" optionalArgs____ (Decode.string |> Decode.nullable)


{-| The first official release date of the media
-}
startDate :
    SelectionSet decodesTo AniList.Object.FuzzyDate
    -> SelectionSet (Maybe decodesTo) AniList.Object.Media
startDate object____ =
    Object.selectionForCompositeField "startDate" [] object____ (Basics.identity >> Decode.nullable)


{-| The last official release date of the media
-}
endDate :
    SelectionSet decodesTo AniList.Object.FuzzyDate
    -> SelectionSet (Maybe decodesTo) AniList.Object.Media
endDate object____ =
    Object.selectionForCompositeField "endDate" [] object____ (Basics.identity >> Decode.nullable)


{-| The season the media was initially released in
-}
season : SelectionSet (Maybe AniList.Enum.MediaSeason.MediaSeason) AniList.Object.Media
season =
    Object.selectionForField "(Maybe Enum.MediaSeason.MediaSeason)" "season" [] (AniList.Enum.MediaSeason.decoder |> Decode.nullable)


{-| The season year the media was initially released in
-}
seasonYear : SelectionSet (Maybe Int) AniList.Object.Media
seasonYear =
    Object.selectionForField "(Maybe Int)" "seasonYear" [] (Decode.int |> Decode.nullable)


{-| The year & season the media was initially released in
-}
seasonInt : SelectionSet (Maybe Int) AniList.Object.Media
seasonInt =
    Object.selectionForField "(Maybe Int)" "seasonInt" [] (Decode.int |> Decode.nullable)


{-| The amount of episodes the anime has when complete
-}
episodes : SelectionSet (Maybe Int) AniList.Object.Media
episodes =
    Object.selectionForField "(Maybe Int)" "episodes" [] (Decode.int |> Decode.nullable)


{-| The general length of each anime episode in minutes
-}
duration : SelectionSet (Maybe Int) AniList.Object.Media
duration =
    Object.selectionForField "(Maybe Int)" "duration" [] (Decode.int |> Decode.nullable)


{-| The amount of chapters the manga has when complete
-}
chapters : SelectionSet (Maybe Int) AniList.Object.Media
chapters =
    Object.selectionForField "(Maybe Int)" "chapters" [] (Decode.int |> Decode.nullable)


{-| The amount of volumes the manga has when complete
-}
volumes : SelectionSet (Maybe Int) AniList.Object.Media
volumes =
    Object.selectionForField "(Maybe Int)" "volumes" [] (Decode.int |> Decode.nullable)


{-| Where the media was created. (ISO 3166-1 alpha-2)
-}
countryOfOrigin : SelectionSet (Maybe AniList.ScalarCodecs.CountryCode) AniList.Object.Media
countryOfOrigin =
    Object.selectionForField "(Maybe ScalarCodecs.CountryCode)" "countryOfOrigin" [] (AniList.ScalarCodecs.codecs |> AniList.Scalar.unwrapCodecs |> .codecCountryCode |> .decoder |> Decode.nullable)


{-| If the media is officially licensed or a self-published doujin release
-}
isLicensed : SelectionSet (Maybe Bool) AniList.Object.Media
isLicensed =
    Object.selectionForField "(Maybe Bool)" "isLicensed" [] (Decode.bool |> Decode.nullable)


type alias SourceOptionalArguments =
    { version : OptionalArgument Int }


{-| Source type the media was adapted from.

  - version - Provide 2 or 3 to use new version 2 or 3 of sources enum

-}
source :
    (SourceOptionalArguments -> SourceOptionalArguments)
    -> SelectionSet (Maybe AniList.Enum.MediaSource.MediaSource) AniList.Object.Media
source fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { version = Absent }

        optionalArgs____ =
            [ Argument.optional "version" filledInOptionals____.version Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForField "(Maybe Enum.MediaSource.MediaSource)" "source" optionalArgs____ (AniList.Enum.MediaSource.decoder |> Decode.nullable)


{-| Official Twitter hashtags for the media
-}
hashtag : SelectionSet (Maybe String) AniList.Object.Media
hashtag =
    Object.selectionForField "(Maybe String)" "hashtag" [] (Decode.string |> Decode.nullable)


{-| Media trailer or advertisement
-}
trailer :
    SelectionSet decodesTo AniList.Object.MediaTrailer
    -> SelectionSet (Maybe decodesTo) AniList.Object.Media
trailer object____ =
    Object.selectionForCompositeField "trailer" [] object____ (Basics.identity >> Decode.nullable)


{-| When the media's data was last updated
-}
updatedAt : SelectionSet (Maybe Int) AniList.Object.Media
updatedAt =
    Object.selectionForField "(Maybe Int)" "updatedAt" [] (Decode.int |> Decode.nullable)


{-| The cover images of the media
-}
coverImage :
    SelectionSet decodesTo AniList.Object.MediaCoverImage
    -> SelectionSet (Maybe decodesTo) AniList.Object.Media
coverImage object____ =
    Object.selectionForCompositeField "coverImage" [] object____ (Basics.identity >> Decode.nullable)


{-| The banner image of the media
-}
bannerImage : SelectionSet (Maybe String) AniList.Object.Media
bannerImage =
    Object.selectionForField "(Maybe String)" "bannerImage" [] (Decode.string |> Decode.nullable)


{-| The genres of the media
-}
genres : SelectionSet (Maybe (List (Maybe String))) AniList.Object.Media
genres =
    Object.selectionForField "(Maybe (List (Maybe String)))" "genres" [] (Decode.string |> Decode.nullable |> Decode.list |> Decode.nullable)


{-| Alternative titles of the media
-}
synonyms : SelectionSet (Maybe (List (Maybe String))) AniList.Object.Media
synonyms =
    Object.selectionForField "(Maybe (List (Maybe String)))" "synonyms" [] (Decode.string |> Decode.nullable |> Decode.list |> Decode.nullable)


{-| A weighted average score of all the user's scores of the media
-}
averageScore : SelectionSet (Maybe Int) AniList.Object.Media
averageScore =
    Object.selectionForField "(Maybe Int)" "averageScore" [] (Decode.int |> Decode.nullable)


{-| Mean score of all the user's scores of the media
-}
meanScore : SelectionSet (Maybe Int) AniList.Object.Media
meanScore =
    Object.selectionForField "(Maybe Int)" "meanScore" [] (Decode.int |> Decode.nullable)


{-| The number of users with the media on their list
-}
popularity : SelectionSet (Maybe Int) AniList.Object.Media
popularity =
    Object.selectionForField "(Maybe Int)" "popularity" [] (Decode.int |> Decode.nullable)


{-| Locked media may not be added to lists our favorited. This may be due to the entry pending for deletion or other reasons.
-}
isLocked : SelectionSet (Maybe Bool) AniList.Object.Media
isLocked =
    Object.selectionForField "(Maybe Bool)" "isLocked" [] (Decode.bool |> Decode.nullable)


{-| The amount of related activity in the past hour
-}
trending : SelectionSet (Maybe Int) AniList.Object.Media
trending =
    Object.selectionForField "(Maybe Int)" "trending" [] (Decode.int |> Decode.nullable)


{-| The amount of user's who have favourited the media
-}
favourites : SelectionSet (Maybe Int) AniList.Object.Media
favourites =
    Object.selectionForField "(Maybe Int)" "favourites" [] (Decode.int |> Decode.nullable)


{-| List of tags that describes elements and themes of the media
-}
tags :
    SelectionSet decodesTo AniList.Object.MediaTag
    -> SelectionSet (Maybe (List (Maybe decodesTo))) AniList.Object.Media
tags object____ =
    Object.selectionForCompositeField "tags" [] object____ (Basics.identity >> Decode.nullable >> Decode.list >> Decode.nullable)


{-| Other media in the same or connecting franchise
-}
relations :
    SelectionSet decodesTo AniList.Object.MediaConnection
    -> SelectionSet (Maybe decodesTo) AniList.Object.Media
relations object____ =
    Object.selectionForCompositeField "relations" [] object____ (Basics.identity >> Decode.nullable)


type alias CharactersOptionalArguments =
    { sort : OptionalArgument (List (Maybe AniList.Enum.CharacterSort.CharacterSort))
    , role : OptionalArgument AniList.Enum.CharacterRole.CharacterRole
    , page : OptionalArgument Int
    , perPage : OptionalArgument Int
    }


{-| The characters in the media

  - page - The page
  - perPage - The amount of entries per page, max 25

-}
characters :
    (CharactersOptionalArguments -> CharactersOptionalArguments)
    -> SelectionSet decodesTo AniList.Object.CharacterConnection
    -> SelectionSet (Maybe decodesTo) AniList.Object.Media
characters fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { sort = Absent, role = Absent, page = Absent, perPage = Absent }

        optionalArgs____ =
            [ Argument.optional "sort" filledInOptionals____.sort (Encode.enum AniList.Enum.CharacterSort.toString |> Encode.maybe |> Encode.list), Argument.optional "role" filledInOptionals____.role (Encode.enum AniList.Enum.CharacterRole.toString), Argument.optional "page" filledInOptionals____.page Encode.int, Argument.optional "perPage" filledInOptionals____.perPage Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "characters" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias StaffOptionalArguments =
    { sort : OptionalArgument (List (Maybe AniList.Enum.StaffSort.StaffSort))
    , page : OptionalArgument Int
    , perPage : OptionalArgument Int
    }


{-| The staff who produced the media

  - page - The page
  - perPage - The amount of entries per page, max 25

-}
staff :
    (StaffOptionalArguments -> StaffOptionalArguments)
    -> SelectionSet decodesTo AniList.Object.StaffConnection
    -> SelectionSet (Maybe decodesTo) AniList.Object.Media
staff fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { sort = Absent, page = Absent, perPage = Absent }

        optionalArgs____ =
            [ Argument.optional "sort" filledInOptionals____.sort (Encode.enum AniList.Enum.StaffSort.toString |> Encode.maybe |> Encode.list), Argument.optional "page" filledInOptionals____.page Encode.int, Argument.optional "perPage" filledInOptionals____.perPage Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "staff" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias StudiosOptionalArguments =
    { sort : OptionalArgument (List (Maybe AniList.Enum.StudioSort.StudioSort))
    , isMain : OptionalArgument Bool
    }


{-| The companies who produced the media
-}
studios :
    (StudiosOptionalArguments -> StudiosOptionalArguments)
    -> SelectionSet decodesTo AniList.Object.StudioConnection
    -> SelectionSet (Maybe decodesTo) AniList.Object.Media
studios fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { sort = Absent, isMain = Absent }

        optionalArgs____ =
            [ Argument.optional "sort" filledInOptionals____.sort (Encode.enum AniList.Enum.StudioSort.toString |> Encode.maybe |> Encode.list), Argument.optional "isMain" filledInOptionals____.isMain Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "studios" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


{-| If the media is marked as favourite by the current authenticated user
-}
isFavourite : SelectionSet Bool AniList.Object.Media
isFavourite =
    Object.selectionForField "Bool" "isFavourite" [] Decode.bool


{-| If the media is intended only for 18+ adult audiences
-}
isAdult : SelectionSet (Maybe Bool) AniList.Object.Media
isAdult =
    Object.selectionForField "(Maybe Bool)" "isAdult" [] (Decode.bool |> Decode.nullable)


{-| The media's next episode airing schedule
-}
nextAiringEpisode :
    SelectionSet decodesTo AniList.Object.AiringSchedule
    -> SelectionSet (Maybe decodesTo) AniList.Object.Media
nextAiringEpisode object____ =
    Object.selectionForCompositeField "nextAiringEpisode" [] object____ (Basics.identity >> Decode.nullable)


type alias AiringScheduleOptionalArguments =
    { notYetAired : OptionalArgument Bool
    , page : OptionalArgument Int
    , perPage : OptionalArgument Int
    }


{-| The media's entire airing schedule

  - notYetAired - Filter to episodes that have not yet aired
  - page - The page
  - perPage - The amount of entries per page, max 25

-}
airingSchedule :
    (AiringScheduleOptionalArguments -> AiringScheduleOptionalArguments)
    -> SelectionSet decodesTo AniList.Object.AiringScheduleConnection
    -> SelectionSet (Maybe decodesTo) AniList.Object.Media
airingSchedule fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { notYetAired = Absent, page = Absent, perPage = Absent }

        optionalArgs____ =
            [ Argument.optional "notYetAired" filledInOptionals____.notYetAired Encode.bool, Argument.optional "page" filledInOptionals____.page Encode.int, Argument.optional "perPage" filledInOptionals____.perPage Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "airingSchedule" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias TrendsOptionalArguments =
    { sort : OptionalArgument (List (Maybe AniList.Enum.MediaTrendSort.MediaTrendSort))
    , releasing : OptionalArgument Bool
    , page : OptionalArgument Int
    , perPage : OptionalArgument Int
    }


{-| The media's daily trend stats

  - releasing - Filter to stats recorded while the media was releasing
  - page - The page
  - perPage - The amount of entries per page, max 25

-}
trends :
    (TrendsOptionalArguments -> TrendsOptionalArguments)
    -> SelectionSet decodesTo AniList.Object.MediaTrendConnection
    -> SelectionSet (Maybe decodesTo) AniList.Object.Media
trends fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { sort = Absent, releasing = Absent, page = Absent, perPage = Absent }

        optionalArgs____ =
            [ Argument.optional "sort" filledInOptionals____.sort (Encode.enum AniList.Enum.MediaTrendSort.toString |> Encode.maybe |> Encode.list), Argument.optional "releasing" filledInOptionals____.releasing Encode.bool, Argument.optional "page" filledInOptionals____.page Encode.int, Argument.optional "perPage" filledInOptionals____.perPage Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "trends" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


{-| External links to another site related to the media
-}
externalLinks :
    SelectionSet decodesTo AniList.Object.MediaExternalLink
    -> SelectionSet (Maybe (List (Maybe decodesTo))) AniList.Object.Media
externalLinks object____ =
    Object.selectionForCompositeField "externalLinks" [] object____ (Basics.identity >> Decode.nullable >> Decode.list >> Decode.nullable)


{-| Data and links to legal streaming episodes on external sites
-}
streamingEpisodes :
    SelectionSet decodesTo AniList.Object.MediaStreamingEpisode
    -> SelectionSet (Maybe (List (Maybe decodesTo))) AniList.Object.Media
streamingEpisodes object____ =
    Object.selectionForCompositeField "streamingEpisodes" [] object____ (Basics.identity >> Decode.nullable >> Decode.list >> Decode.nullable)


{-| The ranking of the media in a particular time span and format compared to other media
-}
rankings :
    SelectionSet decodesTo AniList.Object.MediaRank
    -> SelectionSet (Maybe (List (Maybe decodesTo))) AniList.Object.Media
rankings object____ =
    Object.selectionForCompositeField "rankings" [] object____ (Basics.identity >> Decode.nullable >> Decode.list >> Decode.nullable)


{-| The authenticated user's media list entry for the media
-}
mediaListEntry :
    SelectionSet decodesTo AniList.Object.MediaList
    -> SelectionSet (Maybe decodesTo) AniList.Object.Media
mediaListEntry object____ =
    Object.selectionForCompositeField "mediaListEntry" [] object____ (Basics.identity >> Decode.nullable)


type alias ReviewsOptionalArguments =
    { limit : OptionalArgument Int
    , sort : OptionalArgument (List (Maybe AniList.Enum.ReviewSort.ReviewSort))
    , page : OptionalArgument Int
    , perPage : OptionalArgument Int
    }


{-| User reviews of the media

  - page - The page
  - perPage - The amount of entries per page, max 25

-}
reviews :
    (ReviewsOptionalArguments -> ReviewsOptionalArguments)
    -> SelectionSet decodesTo AniList.Object.ReviewConnection
    -> SelectionSet (Maybe decodesTo) AniList.Object.Media
reviews fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { limit = Absent, sort = Absent, page = Absent, perPage = Absent }

        optionalArgs____ =
            [ Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "sort" filledInOptionals____.sort (Encode.enum AniList.Enum.ReviewSort.toString |> Encode.maybe |> Encode.list), Argument.optional "page" filledInOptionals____.page Encode.int, Argument.optional "perPage" filledInOptionals____.perPage Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "reviews" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias RecommendationsOptionalArguments =
    { sort : OptionalArgument (List (Maybe AniList.Enum.RecommendationSort.RecommendationSort))
    , page : OptionalArgument Int
    , perPage : OptionalArgument Int
    }


{-| User recommendations for similar media

  - page - The page
  - perPage - The amount of entries per page, max 25

-}
recommendations :
    (RecommendationsOptionalArguments -> RecommendationsOptionalArguments)
    -> SelectionSet decodesTo AniList.Object.RecommendationConnection
    -> SelectionSet (Maybe decodesTo) AniList.Object.Media
recommendations fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { sort = Absent, page = Absent, perPage = Absent }

        optionalArgs____ =
            [ Argument.optional "sort" filledInOptionals____.sort (Encode.enum AniList.Enum.RecommendationSort.toString |> Encode.maybe |> Encode.list), Argument.optional "page" filledInOptionals____.page Encode.int, Argument.optional "perPage" filledInOptionals____.perPage Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "recommendations" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


stats :
    SelectionSet decodesTo AniList.Object.MediaStats
    -> SelectionSet (Maybe decodesTo) AniList.Object.Media
stats object____ =
    Object.selectionForCompositeField "stats" [] object____ (Basics.identity >> Decode.nullable)


{-| The url for the media page on the AniList website
-}
siteUrl : SelectionSet (Maybe String) AniList.Object.Media
siteUrl =
    Object.selectionForField "(Maybe String)" "siteUrl" [] (Decode.string |> Decode.nullable)


{-| If the media should have forum thread automatically created for it on airing episode release
-}
autoCreateForumThread : SelectionSet (Maybe Bool) AniList.Object.Media
autoCreateForumThread =
    Object.selectionForField "(Maybe Bool)" "autoCreateForumThread" [] (Decode.bool |> Decode.nullable)


{-| If the media is blocked from being recommended to/from
-}
isRecommendationBlocked : SelectionSet (Maybe Bool) AniList.Object.Media
isRecommendationBlocked =
    Object.selectionForField "(Maybe Bool)" "isRecommendationBlocked" [] (Decode.bool |> Decode.nullable)


{-| Notes for site moderators
-}
modNotes : SelectionSet (Maybe String) AniList.Object.Media
modNotes =
    Object.selectionForField "(Maybe String)" "modNotes" [] (Decode.string |> Decode.nullable)
