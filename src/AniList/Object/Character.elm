-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module AniList.Object.Character exposing (..)

import AniList.Enum.MediaSort
import AniList.Enum.MediaType
import AniList.InputObject
import AniList.Interface
import AniList.Object
import AniList.Scalar
import AniList.ScalarCodecs
import AniList.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| The id of the character
-}
id : SelectionSet Int AniList.Object.Character
id =
    Object.selectionForField "Int" "id" [] Decode.int


{-| The names of the character
-}
name :
    SelectionSet decodesTo AniList.Object.CharacterName
    -> SelectionSet (Maybe decodesTo) AniList.Object.Character
name object____ =
    Object.selectionForCompositeField "name" [] object____ (Basics.identity >> Decode.nullable)


{-| Character images
-}
image :
    SelectionSet decodesTo AniList.Object.CharacterImage
    -> SelectionSet (Maybe decodesTo) AniList.Object.Character
image object____ =
    Object.selectionForCompositeField "image" [] object____ (Basics.identity >> Decode.nullable)


type alias DescriptionOptionalArguments =
    { asHtml : OptionalArgument Bool }


{-| A general description of the character

  - asHtml - Return the string in pre-parsed html instead of markdown

-}
description :
    (DescriptionOptionalArguments -> DescriptionOptionalArguments)
    -> SelectionSet (Maybe String) AniList.Object.Character
description fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { asHtml = Absent }

        optionalArgs____ =
            [ Argument.optional "asHtml" filledInOptionals____.asHtml Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForField "(Maybe String)" "description" optionalArgs____ (Decode.string |> Decode.nullable)


{-| The character's gender. Usually Male, Female, or Non-binary but can be any string.
-}
gender : SelectionSet (Maybe String) AniList.Object.Character
gender =
    Object.selectionForField "(Maybe String)" "gender" [] (Decode.string |> Decode.nullable)


{-| The character's birth date
-}
dateOfBirth :
    SelectionSet decodesTo AniList.Object.FuzzyDate
    -> SelectionSet (Maybe decodesTo) AniList.Object.Character
dateOfBirth object____ =
    Object.selectionForCompositeField "dateOfBirth" [] object____ (Basics.identity >> Decode.nullable)


{-| The character's age. Note this is a string, not an int, it may contain further text and additional ages.
-}
age : SelectionSet (Maybe String) AniList.Object.Character
age =
    Object.selectionForField "(Maybe String)" "age" [] (Decode.string |> Decode.nullable)


{-| The characters blood type
-}
bloodType : SelectionSet (Maybe String) AniList.Object.Character
bloodType =
    Object.selectionForField "(Maybe String)" "bloodType" [] (Decode.string |> Decode.nullable)


{-| If the character is marked as favourite by the currently authenticated user
-}
isFavourite : SelectionSet Bool AniList.Object.Character
isFavourite =
    Object.selectionForField "Bool" "isFavourite" [] Decode.bool


{-| If the character is blocked from being added to favourites
-}
isFavouriteBlocked : SelectionSet Bool AniList.Object.Character
isFavouriteBlocked =
    Object.selectionForField "Bool" "isFavouriteBlocked" [] Decode.bool


{-| The url for the character page on the AniList website
-}
siteUrl : SelectionSet (Maybe String) AniList.Object.Character
siteUrl =
    Object.selectionForField "(Maybe String)" "siteUrl" [] (Decode.string |> Decode.nullable)


type alias MediaOptionalArguments =
    { sort : OptionalArgument (List (Maybe AniList.Enum.MediaSort.MediaSort))
    , type_ : OptionalArgument AniList.Enum.MediaType.MediaType
    , onList : OptionalArgument Bool
    , page : OptionalArgument Int
    , perPage : OptionalArgument Int
    }


{-| Media that includes the character

  - page - The page
  - perPage - The amount of entries per page, max 25

-}
media :
    (MediaOptionalArguments -> MediaOptionalArguments)
    -> SelectionSet decodesTo AniList.Object.MediaConnection
    -> SelectionSet (Maybe decodesTo) AniList.Object.Character
media fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { sort = Absent, type_ = Absent, onList = Absent, page = Absent, perPage = Absent }

        optionalArgs____ =
            [ Argument.optional "sort" filledInOptionals____.sort (Encode.enum AniList.Enum.MediaSort.toString |> Encode.maybe |> Encode.list), Argument.optional "type" filledInOptionals____.type_ (Encode.enum AniList.Enum.MediaType.toString), Argument.optional "onList" filledInOptionals____.onList Encode.bool, Argument.optional "page" filledInOptionals____.page Encode.int, Argument.optional "perPage" filledInOptionals____.perPage Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "media" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


updatedAt : SelectionSet (Maybe Int) AniList.Object.Character
updatedAt =
    Object.selectionForField "(Maybe Int)" "updatedAt" [] (Decode.int |> Decode.nullable)


{-| The amount of user's who have favourited the character
-}
favourites : SelectionSet (Maybe Int) AniList.Object.Character
favourites =
    Object.selectionForField "(Maybe Int)" "favourites" [] (Decode.int |> Decode.nullable)


{-| Notes for site moderators
-}
modNotes : SelectionSet (Maybe String) AniList.Object.Character
modNotes =
    Object.selectionForField "(Maybe String)" "modNotes" [] (Decode.string |> Decode.nullable)
