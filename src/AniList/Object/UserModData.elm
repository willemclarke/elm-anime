-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module AniList.Object.UserModData exposing (..)

import AniList.InputObject
import AniList.Interface
import AniList.Object
import AniList.Scalar
import AniList.ScalarCodecs
import AniList.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


alts :
    SelectionSet decodesTo AniList.Object.User
    -> SelectionSet (Maybe (List (Maybe decodesTo))) AniList.Object.UserModData
alts object____ =
    Object.selectionForCompositeField "alts" [] object____ (Basics.identity >> Decode.nullable >> Decode.list >> Decode.nullable)


bans : SelectionSet (Maybe AniList.ScalarCodecs.Json) AniList.Object.UserModData
bans =
    Object.selectionForField "(Maybe ScalarCodecs.Json)" "bans" [] (AniList.ScalarCodecs.codecs |> AniList.Scalar.unwrapCodecs |> .codecJson |> .decoder |> Decode.nullable)


ip : SelectionSet (Maybe AniList.ScalarCodecs.Json) AniList.Object.UserModData
ip =
    Object.selectionForField "(Maybe ScalarCodecs.Json)" "ip" [] (AniList.ScalarCodecs.codecs |> AniList.Scalar.unwrapCodecs |> .codecJson |> .decoder |> Decode.nullable)


counts : SelectionSet (Maybe AniList.ScalarCodecs.Json) AniList.Object.UserModData
counts =
    Object.selectionForField "(Maybe ScalarCodecs.Json)" "counts" [] (AniList.ScalarCodecs.codecs |> AniList.Scalar.unwrapCodecs |> .codecJson |> .decoder |> Decode.nullable)


privacy : SelectionSet (Maybe Int) AniList.Object.UserModData
privacy =
    Object.selectionForField "(Maybe Int)" "privacy" [] (Decode.int |> Decode.nullable)


email : SelectionSet (Maybe String) AniList.Object.UserModData
email =
    Object.selectionForField "(Maybe String)" "email" [] (Decode.string |> Decode.nullable)
