-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module AniList.Object.MediaEdge exposing (..)

import AniList.Enum.CharacterRole
import AniList.Enum.MediaRelation
import AniList.Enum.StaffLanguage
import AniList.Enum.StaffSort
import AniList.InputObject
import AniList.Interface
import AniList.Object
import AniList.Scalar
import AniList.ScalarCodecs
import AniList.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


node :
    SelectionSet decodesTo AniList.Object.Media
    -> SelectionSet (Maybe decodesTo) AniList.Object.MediaEdge
node object____ =
    Object.selectionForCompositeField "node" [] object____ (Basics.identity >> Decode.nullable)


{-| The id of the connection
-}
id : SelectionSet (Maybe Int) AniList.Object.MediaEdge
id =
    Object.selectionForField "(Maybe Int)" "id" [] (Decode.int |> Decode.nullable)


type alias RelationTypeOptionalArguments =
    { version : OptionalArgument Int }


{-| The type of relation to the parent model

  - version - Provide 2 to use new version 2 of relation enum

-}
relationType :
    (RelationTypeOptionalArguments -> RelationTypeOptionalArguments)
    -> SelectionSet (Maybe AniList.Enum.MediaRelation.MediaRelation) AniList.Object.MediaEdge
relationType fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { version = Absent }

        optionalArgs____ =
            [ Argument.optional "version" filledInOptionals____.version Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForField "(Maybe Enum.MediaRelation.MediaRelation)" "relationType" optionalArgs____ (AniList.Enum.MediaRelation.decoder |> Decode.nullable)


{-| If the studio is the main animation studio of the media (For Studio->MediaConnection field only)
-}
isMainStudio : SelectionSet Bool AniList.Object.MediaEdge
isMainStudio =
    Object.selectionForField "Bool" "isMainStudio" [] Decode.bool


{-| The characters in the media voiced by the parent actor
-}
characters :
    SelectionSet decodesTo AniList.Object.Character
    -> SelectionSet (Maybe (List (Maybe decodesTo))) AniList.Object.MediaEdge
characters object____ =
    Object.selectionForCompositeField "characters" [] object____ (Basics.identity >> Decode.nullable >> Decode.list >> Decode.nullable)


{-| The characters role in the media
-}
characterRole : SelectionSet (Maybe AniList.Enum.CharacterRole.CharacterRole) AniList.Object.MediaEdge
characterRole =
    Object.selectionForField "(Maybe Enum.CharacterRole.CharacterRole)" "characterRole" [] (AniList.Enum.CharacterRole.decoder |> Decode.nullable)


{-| Media specific character name
-}
characterName : SelectionSet (Maybe String) AniList.Object.MediaEdge
characterName =
    Object.selectionForField "(Maybe String)" "characterName" [] (Decode.string |> Decode.nullable)


{-| Notes regarding the VA's role for the character
-}
roleNotes : SelectionSet (Maybe String) AniList.Object.MediaEdge
roleNotes =
    Object.selectionForField "(Maybe String)" "roleNotes" [] (Decode.string |> Decode.nullable)


{-| Used for grouping roles where multiple dubs exist for the same language. Either dubbing company name or language variant.
-}
dubGroup : SelectionSet (Maybe String) AniList.Object.MediaEdge
dubGroup =
    Object.selectionForField "(Maybe String)" "dubGroup" [] (Decode.string |> Decode.nullable)


{-| The role of the staff member in the production of the media
-}
staffRole : SelectionSet (Maybe String) AniList.Object.MediaEdge
staffRole =
    Object.selectionForField "(Maybe String)" "staffRole" [] (Decode.string |> Decode.nullable)


type alias VoiceActorsOptionalArguments =
    { language : OptionalArgument AniList.Enum.StaffLanguage.StaffLanguage
    , sort : OptionalArgument (List (Maybe AniList.Enum.StaffSort.StaffSort))
    }


{-| The voice actors of the character
-}
voiceActors :
    (VoiceActorsOptionalArguments -> VoiceActorsOptionalArguments)
    -> SelectionSet decodesTo AniList.Object.Staff
    -> SelectionSet (Maybe (List (Maybe decodesTo))) AniList.Object.MediaEdge
voiceActors fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { language = Absent, sort = Absent }

        optionalArgs____ =
            [ Argument.optional "language" filledInOptionals____.language (Encode.enum AniList.Enum.StaffLanguage.toString), Argument.optional "sort" filledInOptionals____.sort (Encode.enum AniList.Enum.StaffSort.toString |> Encode.maybe |> Encode.list) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "voiceActors" optionalArgs____ object____ (Basics.identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias VoiceActorRolesOptionalArguments =
    { language : OptionalArgument AniList.Enum.StaffLanguage.StaffLanguage
    , sort : OptionalArgument (List (Maybe AniList.Enum.StaffSort.StaffSort))
    }


{-| The voice actors of the character with role date
-}
voiceActorRoles :
    (VoiceActorRolesOptionalArguments -> VoiceActorRolesOptionalArguments)
    -> SelectionSet decodesTo AniList.Object.StaffRoleType
    -> SelectionSet (Maybe (List (Maybe decodesTo))) AniList.Object.MediaEdge
voiceActorRoles fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { language = Absent, sort = Absent }

        optionalArgs____ =
            [ Argument.optional "language" filledInOptionals____.language (Encode.enum AniList.Enum.StaffLanguage.toString), Argument.optional "sort" filledInOptionals____.sort (Encode.enum AniList.Enum.StaffSort.toString |> Encode.maybe |> Encode.list) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "voiceActorRoles" optionalArgs____ object____ (Basics.identity >> Decode.nullable >> Decode.list >> Decode.nullable)


{-| The order the media should be displayed from the users favourites
-}
favouriteOrder : SelectionSet (Maybe Int) AniList.Object.MediaEdge
favouriteOrder =
    Object.selectionForField "(Maybe Int)" "favouriteOrder" [] (Decode.int |> Decode.nullable)
