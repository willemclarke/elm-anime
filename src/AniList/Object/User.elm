-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module AniList.Object.User exposing (..)

import AniList.Enum.ModRole
import AniList.InputObject
import AniList.Interface
import AniList.Object
import AniList.Scalar
import AniList.ScalarCodecs
import AniList.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| The id of the user
-}
id : SelectionSet Int AniList.Object.User
id =
    Object.selectionForField "Int" "id" [] Decode.int


{-| The name of the user
-}
name : SelectionSet String AniList.Object.User
name =
    Object.selectionForField "String" "name" [] Decode.string


type alias AboutOptionalArguments =
    { asHtml : OptionalArgument Bool }


{-| The bio written by user (Markdown)

  - asHtml - Return the string in pre-parsed html instead of markdown

-}
about :
    (AboutOptionalArguments -> AboutOptionalArguments)
    -> SelectionSet (Maybe String) AniList.Object.User
about fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { asHtml = Absent }

        optionalArgs____ =
            [ Argument.optional "asHtml" filledInOptionals____.asHtml Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForField "(Maybe String)" "about" optionalArgs____ (Decode.string |> Decode.nullable)


{-| The user's avatar images
-}
avatar :
    SelectionSet decodesTo AniList.Object.UserAvatar
    -> SelectionSet (Maybe decodesTo) AniList.Object.User
avatar object____ =
    Object.selectionForCompositeField "avatar" [] object____ (Basics.identity >> Decode.nullable)


{-| The user's banner images
-}
bannerImage : SelectionSet (Maybe String) AniList.Object.User
bannerImage =
    Object.selectionForField "(Maybe String)" "bannerImage" [] (Decode.string |> Decode.nullable)


{-| If the authenticated user if following this user
-}
isFollowing : SelectionSet (Maybe Bool) AniList.Object.User
isFollowing =
    Object.selectionForField "(Maybe Bool)" "isFollowing" [] (Decode.bool |> Decode.nullable)


{-| If this user if following the authenticated user
-}
isFollower : SelectionSet (Maybe Bool) AniList.Object.User
isFollower =
    Object.selectionForField "(Maybe Bool)" "isFollower" [] (Decode.bool |> Decode.nullable)


{-| If the user is blocked by the authenticated user
-}
isBlocked : SelectionSet (Maybe Bool) AniList.Object.User
isBlocked =
    Object.selectionForField "(Maybe Bool)" "isBlocked" [] (Decode.bool |> Decode.nullable)


bans : SelectionSet (Maybe AniList.ScalarCodecs.Json) AniList.Object.User
bans =
    Object.selectionForField "(Maybe ScalarCodecs.Json)" "bans" [] (AniList.ScalarCodecs.codecs |> AniList.Scalar.unwrapCodecs |> .codecJson |> .decoder |> Decode.nullable)


{-| The user's general options
-}
options :
    SelectionSet decodesTo AniList.Object.UserOptions
    -> SelectionSet (Maybe decodesTo) AniList.Object.User
options object____ =
    Object.selectionForCompositeField "options" [] object____ (Basics.identity >> Decode.nullable)


{-| The user's media list options
-}
mediaListOptions :
    SelectionSet decodesTo AniList.Object.MediaListOptions
    -> SelectionSet (Maybe decodesTo) AniList.Object.User
mediaListOptions object____ =
    Object.selectionForCompositeField "mediaListOptions" [] object____ (Basics.identity >> Decode.nullable)


type alias FavouritesOptionalArguments =
    { page : OptionalArgument Int }


{-| The users favourites

  - page - Deprecated. Use page arguments on each favourite field instead.

-}
favourites :
    (FavouritesOptionalArguments -> FavouritesOptionalArguments)
    -> SelectionSet decodesTo AniList.Object.Favourites
    -> SelectionSet (Maybe decodesTo) AniList.Object.User
favourites fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { page = Absent }

        optionalArgs____ =
            [ Argument.optional "page" filledInOptionals____.page Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "favourites" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


{-| The users anime & manga list statistics
-}
statistics :
    SelectionSet decodesTo AniList.Object.UserStatisticTypes
    -> SelectionSet (Maybe decodesTo) AniList.Object.User
statistics object____ =
    Object.selectionForCompositeField "statistics" [] object____ (Basics.identity >> Decode.nullable)


{-| The number of unread notifications the user has
-}
unreadNotificationCount : SelectionSet (Maybe Int) AniList.Object.User
unreadNotificationCount =
    Object.selectionForField "(Maybe Int)" "unreadNotificationCount" [] (Decode.int |> Decode.nullable)


{-| The url for the user page on the AniList website
-}
siteUrl : SelectionSet (Maybe String) AniList.Object.User
siteUrl =
    Object.selectionForField "(Maybe String)" "siteUrl" [] (Decode.string |> Decode.nullable)


{-| The donation tier of the user
-}
donatorTier : SelectionSet (Maybe Int) AniList.Object.User
donatorTier =
    Object.selectionForField "(Maybe Int)" "donatorTier" [] (Decode.int |> Decode.nullable)


{-| Custom donation badge text
-}
donatorBadge : SelectionSet (Maybe String) AniList.Object.User
donatorBadge =
    Object.selectionForField "(Maybe String)" "donatorBadge" [] (Decode.string |> Decode.nullable)


{-| The user's moderator roles if they are a site moderator
-}
moderatorRoles : SelectionSet (Maybe (List (Maybe AniList.Enum.ModRole.ModRole))) AniList.Object.User
moderatorRoles =
    Object.selectionForField "(Maybe (List (Maybe Enum.ModRole.ModRole)))" "moderatorRoles" [] (AniList.Enum.ModRole.decoder |> Decode.nullable |> Decode.list |> Decode.nullable)


{-| When the user's account was created. (Does not exist for accounts created before 2020)
-}
createdAt : SelectionSet (Maybe Int) AniList.Object.User
createdAt =
    Object.selectionForField "(Maybe Int)" "createdAt" [] (Decode.int |> Decode.nullable)


{-| When the user's data was last updated
-}
updatedAt : SelectionSet (Maybe Int) AniList.Object.User
updatedAt =
    Object.selectionForField "(Maybe Int)" "updatedAt" [] (Decode.int |> Decode.nullable)


{-| The user's statistics
-}
stats :
    SelectionSet decodesTo AniList.Object.UserStats
    -> SelectionSet (Maybe decodesTo) AniList.Object.User
stats object____ =
    Object.selectionForCompositeField "stats" [] object____ (Basics.identity >> Decode.nullable)


{-| If the user is a moderator or data moderator
-}
moderatorStatus : SelectionSet (Maybe String) AniList.Object.User
moderatorStatus =
    Object.selectionForField "(Maybe String)" "moderatorStatus" [] (Decode.string |> Decode.nullable)


{-| The user's previously used names.
-}
previousNames :
    SelectionSet decodesTo AniList.Object.UserPreviousName
    -> SelectionSet (Maybe (List (Maybe decodesTo))) AniList.Object.User
previousNames object____ =
    Object.selectionForCompositeField "previousNames" [] object____ (Basics.identity >> Decode.nullable >> Decode.list >> Decode.nullable)
