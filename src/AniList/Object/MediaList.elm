-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module AniList.Object.MediaList exposing (..)

import AniList.Enum.MediaListStatus
import AniList.Enum.ScoreFormat
import AniList.InputObject
import AniList.Interface
import AniList.Object
import AniList.Scalar
import AniList.ScalarCodecs
import AniList.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| The id of the list entry
-}
id : SelectionSet Int AniList.Object.MediaList
id =
    Object.selectionForField "Int" "id" [] Decode.int


{-| The id of the user owner of the list entry
-}
userId : SelectionSet Int AniList.Object.MediaList
userId =
    Object.selectionForField "Int" "userId" [] Decode.int


{-| The id of the media
-}
mediaId : SelectionSet Int AniList.Object.MediaList
mediaId =
    Object.selectionForField "Int" "mediaId" [] Decode.int


{-| The watching/reading status
-}
status : SelectionSet (Maybe AniList.Enum.MediaListStatus.MediaListStatus) AniList.Object.MediaList
status =
    Object.selectionForField "(Maybe Enum.MediaListStatus.MediaListStatus)" "status" [] (AniList.Enum.MediaListStatus.decoder |> Decode.nullable)


type alias ScoreOptionalArguments =
    { format : OptionalArgument AniList.Enum.ScoreFormat.ScoreFormat }


{-| The score of the entry

  - format - Force the score to be returned in the provided format type.

-}
score :
    (ScoreOptionalArguments -> ScoreOptionalArguments)
    -> SelectionSet (Maybe Float) AniList.Object.MediaList
score fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { format = Absent }

        optionalArgs____ =
            [ Argument.optional "format" filledInOptionals____.format (Encode.enum AniList.Enum.ScoreFormat.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForField "(Maybe Float)" "score" optionalArgs____ (Decode.float |> Decode.nullable)


{-| The amount of episodes/chapters consumed by the user
-}
progress : SelectionSet (Maybe Int) AniList.Object.MediaList
progress =
    Object.selectionForField "(Maybe Int)" "progress" [] (Decode.int |> Decode.nullable)


{-| The amount of volumes read by the user
-}
progressVolumes : SelectionSet (Maybe Int) AniList.Object.MediaList
progressVolumes =
    Object.selectionForField "(Maybe Int)" "progressVolumes" [] (Decode.int |> Decode.nullable)


{-| The amount of times the user has rewatched/read the media
-}
repeat : SelectionSet (Maybe Int) AniList.Object.MediaList
repeat =
    Object.selectionForField "(Maybe Int)" "repeat" [] (Decode.int |> Decode.nullable)


{-| Priority of planning
-}
priority : SelectionSet (Maybe Int) AniList.Object.MediaList
priority =
    Object.selectionForField "(Maybe Int)" "priority" [] (Decode.int |> Decode.nullable)


{-| If the entry should only be visible to authenticated user
-}
private : SelectionSet (Maybe Bool) AniList.Object.MediaList
private =
    Object.selectionForField "(Maybe Bool)" "private" [] (Decode.bool |> Decode.nullable)


{-| Text notes
-}
notes : SelectionSet (Maybe String) AniList.Object.MediaList
notes =
    Object.selectionForField "(Maybe String)" "notes" [] (Decode.string |> Decode.nullable)


{-| If the entry shown be hidden from non-custom lists
-}
hiddenFromStatusLists : SelectionSet (Maybe Bool) AniList.Object.MediaList
hiddenFromStatusLists =
    Object.selectionForField "(Maybe Bool)" "hiddenFromStatusLists" [] (Decode.bool |> Decode.nullable)


type alias CustomListsOptionalArguments =
    { asArray : OptionalArgument Bool }


{-| Map of booleans for which custom lists the entry are in

  - asArray - Change return structure to an array of objects

-}
customLists :
    (CustomListsOptionalArguments -> CustomListsOptionalArguments)
    -> SelectionSet (Maybe AniList.ScalarCodecs.Json) AniList.Object.MediaList
customLists fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { asArray = Absent }

        optionalArgs____ =
            [ Argument.optional "asArray" filledInOptionals____.asArray Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForField "(Maybe ScalarCodecs.Json)" "customLists" optionalArgs____ (AniList.ScalarCodecs.codecs |> AniList.Scalar.unwrapCodecs |> .codecJson |> .decoder |> Decode.nullable)


{-| Map of advanced scores with name keys
-}
advancedScores : SelectionSet (Maybe AniList.ScalarCodecs.Json) AniList.Object.MediaList
advancedScores =
    Object.selectionForField "(Maybe ScalarCodecs.Json)" "advancedScores" [] (AniList.ScalarCodecs.codecs |> AniList.Scalar.unwrapCodecs |> .codecJson |> .decoder |> Decode.nullable)


{-| When the entry was started by the user
-}
startedAt :
    SelectionSet decodesTo AniList.Object.FuzzyDate
    -> SelectionSet (Maybe decodesTo) AniList.Object.MediaList
startedAt object____ =
    Object.selectionForCompositeField "startedAt" [] object____ (Basics.identity >> Decode.nullable)


{-| When the entry was completed by the user
-}
completedAt :
    SelectionSet decodesTo AniList.Object.FuzzyDate
    -> SelectionSet (Maybe decodesTo) AniList.Object.MediaList
completedAt object____ =
    Object.selectionForCompositeField "completedAt" [] object____ (Basics.identity >> Decode.nullable)


{-| When the entry data was last updated
-}
updatedAt : SelectionSet (Maybe Int) AniList.Object.MediaList
updatedAt =
    Object.selectionForField "(Maybe Int)" "updatedAt" [] (Decode.int |> Decode.nullable)


{-| When the entry data was created
-}
createdAt : SelectionSet (Maybe Int) AniList.Object.MediaList
createdAt =
    Object.selectionForField "(Maybe Int)" "createdAt" [] (Decode.int |> Decode.nullable)


media :
    SelectionSet decodesTo AniList.Object.Media
    -> SelectionSet (Maybe decodesTo) AniList.Object.MediaList
media object____ =
    Object.selectionForCompositeField "media" [] object____ (Basics.identity >> Decode.nullable)


user :
    SelectionSet decodesTo AniList.Object.User
    -> SelectionSet (Maybe decodesTo) AniList.Object.MediaList
user object____ =
    Object.selectionForCompositeField "user" [] object____ (Basics.identity >> Decode.nullable)
