-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module AniList.Object.CharacterEdge exposing (..)

import AniList.Enum.CharacterRole
import AniList.Enum.StaffLanguage
import AniList.Enum.StaffSort
import AniList.InputObject
import AniList.Interface
import AniList.Object
import AniList.Scalar
import AniList.ScalarCodecs
import AniList.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


node :
    SelectionSet decodesTo AniList.Object.Character
    -> SelectionSet (Maybe decodesTo) AniList.Object.CharacterEdge
node object____ =
    Object.selectionForCompositeField "node" [] object____ (Basics.identity >> Decode.nullable)


{-| The id of the connection
-}
id : SelectionSet (Maybe Int) AniList.Object.CharacterEdge
id =
    Object.selectionForField "(Maybe Int)" "id" [] (Decode.int |> Decode.nullable)


{-| The characters role in the media
-}
role : SelectionSet (Maybe AniList.Enum.CharacterRole.CharacterRole) AniList.Object.CharacterEdge
role =
    Object.selectionForField "(Maybe Enum.CharacterRole.CharacterRole)" "role" [] (AniList.Enum.CharacterRole.decoder |> Decode.nullable)


{-| Media specific character name
-}
name : SelectionSet (Maybe String) AniList.Object.CharacterEdge
name =
    Object.selectionForField "(Maybe String)" "name" [] (Decode.string |> Decode.nullable)


type alias VoiceActorsOptionalArguments =
    { language : OptionalArgument AniList.Enum.StaffLanguage.StaffLanguage
    , sort : OptionalArgument (List (Maybe AniList.Enum.StaffSort.StaffSort))
    }


{-| The voice actors of the character
-}
voiceActors :
    (VoiceActorsOptionalArguments -> VoiceActorsOptionalArguments)
    -> SelectionSet decodesTo AniList.Object.Staff
    -> SelectionSet (Maybe (List (Maybe decodesTo))) AniList.Object.CharacterEdge
voiceActors fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { language = Absent, sort = Absent }

        optionalArgs____ =
            [ Argument.optional "language" filledInOptionals____.language (Encode.enum AniList.Enum.StaffLanguage.toString), Argument.optional "sort" filledInOptionals____.sort (Encode.enum AniList.Enum.StaffSort.toString |> Encode.maybe |> Encode.list) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "voiceActors" optionalArgs____ object____ (Basics.identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias VoiceActorRolesOptionalArguments =
    { language : OptionalArgument AniList.Enum.StaffLanguage.StaffLanguage
    , sort : OptionalArgument (List (Maybe AniList.Enum.StaffSort.StaffSort))
    }


{-| The voice actors of the character with role date
-}
voiceActorRoles :
    (VoiceActorRolesOptionalArguments -> VoiceActorRolesOptionalArguments)
    -> SelectionSet decodesTo AniList.Object.StaffRoleType
    -> SelectionSet (Maybe (List (Maybe decodesTo))) AniList.Object.CharacterEdge
voiceActorRoles fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { language = Absent, sort = Absent }

        optionalArgs____ =
            [ Argument.optional "language" filledInOptionals____.language (Encode.enum AniList.Enum.StaffLanguage.toString), Argument.optional "sort" filledInOptionals____.sort (Encode.enum AniList.Enum.StaffSort.toString |> Encode.maybe |> Encode.list) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "voiceActorRoles" optionalArgs____ object____ (Basics.identity >> Decode.nullable >> Decode.list >> Decode.nullable)


{-| The media the character is in
-}
media :
    SelectionSet decodesTo AniList.Object.Media
    -> SelectionSet (Maybe (List (Maybe decodesTo))) AniList.Object.CharacterEdge
media object____ =
    Object.selectionForCompositeField "media" [] object____ (Basics.identity >> Decode.nullable >> Decode.list >> Decode.nullable)


{-| The order the character should be displayed from the users favourites
-}
favouriteOrder : SelectionSet (Maybe Int) AniList.Object.CharacterEdge
favouriteOrder =
    Object.selectionForField "(Maybe Int)" "favouriteOrder" [] (Decode.int |> Decode.nullable)
