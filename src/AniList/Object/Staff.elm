-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module AniList.Object.Staff exposing (..)

import AniList.Enum.CharacterSort
import AniList.Enum.MediaSort
import AniList.Enum.MediaType
import AniList.Enum.StaffLanguage
import AniList.InputObject
import AniList.Interface
import AniList.Object
import AniList.Scalar
import AniList.ScalarCodecs
import AniList.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| The id of the staff member
-}
id : SelectionSet Int AniList.Object.Staff
id =
    Object.selectionForField "Int" "id" [] Decode.int


{-| The names of the staff member
-}
name :
    SelectionSet decodesTo AniList.Object.StaffName
    -> SelectionSet (Maybe decodesTo) AniList.Object.Staff
name object____ =
    Object.selectionForCompositeField "name" [] object____ (Basics.identity >> Decode.nullable)


{-| The primary language the staff member dub's in
-}
language : SelectionSet (Maybe AniList.Enum.StaffLanguage.StaffLanguage) AniList.Object.Staff
language =
    Object.selectionForField "(Maybe Enum.StaffLanguage.StaffLanguage)" "language" [] (AniList.Enum.StaffLanguage.decoder |> Decode.nullable)


{-| The primary language of the staff member. Current values: Japanese, English, Korean, Italian, Spanish, Portuguese, French, German, Hebrew, Hungarian, Chinese, Arabic, Filipino, Catalan
-}
languageV2 : SelectionSet (Maybe String) AniList.Object.Staff
languageV2 =
    Object.selectionForField "(Maybe String)" "languageV2" [] (Decode.string |> Decode.nullable)


{-| The staff images
-}
image :
    SelectionSet decodesTo AniList.Object.StaffImage
    -> SelectionSet (Maybe decodesTo) AniList.Object.Staff
image object____ =
    Object.selectionForCompositeField "image" [] object____ (Basics.identity >> Decode.nullable)


type alias DescriptionOptionalArguments =
    { asHtml : OptionalArgument Bool }


{-| A general description of the staff member

  - asHtml - Return the string in pre-parsed html instead of markdown

-}
description :
    (DescriptionOptionalArguments -> DescriptionOptionalArguments)
    -> SelectionSet (Maybe String) AniList.Object.Staff
description fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { asHtml = Absent }

        optionalArgs____ =
            [ Argument.optional "asHtml" filledInOptionals____.asHtml Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForField "(Maybe String)" "description" optionalArgs____ (Decode.string |> Decode.nullable)


{-| The person's primary occupations
-}
primaryOccupations : SelectionSet (Maybe (List (Maybe String))) AniList.Object.Staff
primaryOccupations =
    Object.selectionForField "(Maybe (List (Maybe String)))" "primaryOccupations" [] (Decode.string |> Decode.nullable |> Decode.list |> Decode.nullable)


{-| The staff's gender. Usually Male, Female, or Non-binary but can be any string.
-}
gender : SelectionSet (Maybe String) AniList.Object.Staff
gender =
    Object.selectionForField "(Maybe String)" "gender" [] (Decode.string |> Decode.nullable)


dateOfBirth :
    SelectionSet decodesTo AniList.Object.FuzzyDate
    -> SelectionSet (Maybe decodesTo) AniList.Object.Staff
dateOfBirth object____ =
    Object.selectionForCompositeField "dateOfBirth" [] object____ (Basics.identity >> Decode.nullable)


dateOfDeath :
    SelectionSet decodesTo AniList.Object.FuzzyDate
    -> SelectionSet (Maybe decodesTo) AniList.Object.Staff
dateOfDeath object____ =
    Object.selectionForCompositeField "dateOfDeath" [] object____ (Basics.identity >> Decode.nullable)


{-| The person's age in years
-}
age : SelectionSet (Maybe Int) AniList.Object.Staff
age =
    Object.selectionForField "(Maybe Int)" "age" [] (Decode.int |> Decode.nullable)


{-| [startYear, endYear] (If the 2nd value is not present staff is still active)
-}
yearsActive : SelectionSet (Maybe (List (Maybe Int))) AniList.Object.Staff
yearsActive =
    Object.selectionForField "(Maybe (List (Maybe Int)))" "yearsActive" [] (Decode.int |> Decode.nullable |> Decode.list |> Decode.nullable)


{-| The persons birthplace or hometown
-}
homeTown : SelectionSet (Maybe String) AniList.Object.Staff
homeTown =
    Object.selectionForField "(Maybe String)" "homeTown" [] (Decode.string |> Decode.nullable)


{-| The persons blood type
-}
bloodType : SelectionSet (Maybe String) AniList.Object.Staff
bloodType =
    Object.selectionForField "(Maybe String)" "bloodType" [] (Decode.string |> Decode.nullable)


{-| If the staff member is marked as favourite by the currently authenticated user
-}
isFavourite : SelectionSet Bool AniList.Object.Staff
isFavourite =
    Object.selectionForField "Bool" "isFavourite" [] Decode.bool


{-| If the staff member is blocked from being added to favourites
-}
isFavouriteBlocked : SelectionSet Bool AniList.Object.Staff
isFavouriteBlocked =
    Object.selectionForField "Bool" "isFavouriteBlocked" [] Decode.bool


{-| The url for the staff page on the AniList website
-}
siteUrl : SelectionSet (Maybe String) AniList.Object.Staff
siteUrl =
    Object.selectionForField "(Maybe String)" "siteUrl" [] (Decode.string |> Decode.nullable)


type alias StaffMediaOptionalArguments =
    { sort : OptionalArgument (List (Maybe AniList.Enum.MediaSort.MediaSort))
    , type_ : OptionalArgument AniList.Enum.MediaType.MediaType
    , onList : OptionalArgument Bool
    , page : OptionalArgument Int
    , perPage : OptionalArgument Int
    }


{-| Media where the staff member has a production role

  - page - The page
  - perPage - The amount of entries per page, max 25

-}
staffMedia :
    (StaffMediaOptionalArguments -> StaffMediaOptionalArguments)
    -> SelectionSet decodesTo AniList.Object.MediaConnection
    -> SelectionSet (Maybe decodesTo) AniList.Object.Staff
staffMedia fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { sort = Absent, type_ = Absent, onList = Absent, page = Absent, perPage = Absent }

        optionalArgs____ =
            [ Argument.optional "sort" filledInOptionals____.sort (Encode.enum AniList.Enum.MediaSort.toString |> Encode.maybe |> Encode.list), Argument.optional "type" filledInOptionals____.type_ (Encode.enum AniList.Enum.MediaType.toString), Argument.optional "onList" filledInOptionals____.onList Encode.bool, Argument.optional "page" filledInOptionals____.page Encode.int, Argument.optional "perPage" filledInOptionals____.perPage Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "staffMedia" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias CharactersOptionalArguments =
    { sort : OptionalArgument (List (Maybe AniList.Enum.CharacterSort.CharacterSort))
    , page : OptionalArgument Int
    , perPage : OptionalArgument Int
    }


{-| Characters voiced by the actor

  - page - The page
  - perPage - The amount of entries per page, max 25

-}
characters :
    (CharactersOptionalArguments -> CharactersOptionalArguments)
    -> SelectionSet decodesTo AniList.Object.CharacterConnection
    -> SelectionSet (Maybe decodesTo) AniList.Object.Staff
characters fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { sort = Absent, page = Absent, perPage = Absent }

        optionalArgs____ =
            [ Argument.optional "sort" filledInOptionals____.sort (Encode.enum AniList.Enum.CharacterSort.toString |> Encode.maybe |> Encode.list), Argument.optional "page" filledInOptionals____.page Encode.int, Argument.optional "perPage" filledInOptionals____.perPage Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "characters" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias CharacterMediaOptionalArguments =
    { sort : OptionalArgument (List (Maybe AniList.Enum.MediaSort.MediaSort))
    , onList : OptionalArgument Bool
    , page : OptionalArgument Int
    , perPage : OptionalArgument Int
    }


{-| Media the actor voiced characters in. (Same data as characters with media as node instead of characters)

  - page - The page
  - perPage - The amount of entries per page, max 25

-}
characterMedia :
    (CharacterMediaOptionalArguments -> CharacterMediaOptionalArguments)
    -> SelectionSet decodesTo AniList.Object.MediaConnection
    -> SelectionSet (Maybe decodesTo) AniList.Object.Staff
characterMedia fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { sort = Absent, onList = Absent, page = Absent, perPage = Absent }

        optionalArgs____ =
            [ Argument.optional "sort" filledInOptionals____.sort (Encode.enum AniList.Enum.MediaSort.toString |> Encode.maybe |> Encode.list), Argument.optional "onList" filledInOptionals____.onList Encode.bool, Argument.optional "page" filledInOptionals____.page Encode.int, Argument.optional "perPage" filledInOptionals____.perPage Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "characterMedia" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


updatedAt : SelectionSet (Maybe Int) AniList.Object.Staff
updatedAt =
    Object.selectionForField "(Maybe Int)" "updatedAt" [] (Decode.int |> Decode.nullable)


{-| Staff member that the submission is referencing
-}
staff :
    SelectionSet decodesTo AniList.Object.Staff
    -> SelectionSet (Maybe decodesTo) AniList.Object.Staff
staff object____ =
    Object.selectionForCompositeField "staff" [] object____ (Basics.identity >> Decode.nullable)


{-| Submitter for the submission
-}
submitter :
    SelectionSet decodesTo AniList.Object.User
    -> SelectionSet (Maybe decodesTo) AniList.Object.Staff
submitter object____ =
    Object.selectionForCompositeField "submitter" [] object____ (Basics.identity >> Decode.nullable)


{-| Status of the submission
-}
submissionStatus : SelectionSet (Maybe Int) AniList.Object.Staff
submissionStatus =
    Object.selectionForField "(Maybe Int)" "submissionStatus" [] (Decode.int |> Decode.nullable)


{-| Inner details of submission status
-}
submissionNotes : SelectionSet (Maybe String) AniList.Object.Staff
submissionNotes =
    Object.selectionForField "(Maybe String)" "submissionNotes" [] (Decode.string |> Decode.nullable)


{-| The amount of user's who have favourited the staff member
-}
favourites : SelectionSet (Maybe Int) AniList.Object.Staff
favourites =
    Object.selectionForField "(Maybe Int)" "favourites" [] (Decode.int |> Decode.nullable)


{-| Notes for site moderators
-}
modNotes : SelectionSet (Maybe String) AniList.Object.Staff
modNotes =
    Object.selectionForField "(Maybe String)" "modNotes" [] (Decode.string |> Decode.nullable)
