-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module AniList.Enum.MediaRelation exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| Type of relation media has to its parent.

  - Adaptation - An adaption of this media into a different format
  - Prequel - Released before the relation
  - Sequel - Released after the relation
  - Parent - The media a side story is from
  - SideStory - A side story of the parent media
  - Character - Shares at least 1 character
  - Summary - A shortened and summarized version
  - Alternative - An alternative version of the same media
  - SpinOff - An alternative version of the media with a different primary focus
  - Other - Other
  - Source - Version 2 only. The source material the media was adapted from
  - Compilation - Version 2 only.
  - Contains - Version 2 only.

-}
type MediaRelation
    = Adaptation
    | Prequel
    | Sequel
    | Parent
    | SideStory
    | Character
    | Summary
    | Alternative
    | SpinOff
    | Other
    | Source
    | Compilation
    | Contains


list : List MediaRelation
list =
    [ Adaptation, Prequel, Sequel, Parent, SideStory, Character, Summary, Alternative, SpinOff, Other, Source, Compilation, Contains ]


decoder : Decoder MediaRelation
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "ADAPTATION" ->
                        Decode.succeed Adaptation

                    "PREQUEL" ->
                        Decode.succeed Prequel

                    "SEQUEL" ->
                        Decode.succeed Sequel

                    "PARENT" ->
                        Decode.succeed Parent

                    "SIDE_STORY" ->
                        Decode.succeed SideStory

                    "CHARACTER" ->
                        Decode.succeed Character

                    "SUMMARY" ->
                        Decode.succeed Summary

                    "ALTERNATIVE" ->
                        Decode.succeed Alternative

                    "SPIN_OFF" ->
                        Decode.succeed SpinOff

                    "OTHER" ->
                        Decode.succeed Other

                    "SOURCE" ->
                        Decode.succeed Source

                    "COMPILATION" ->
                        Decode.succeed Compilation

                    "CONTAINS" ->
                        Decode.succeed Contains

                    _ ->
                        Decode.fail ("Invalid MediaRelation type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : MediaRelation -> String
toString enum____ =
    case enum____ of
        Adaptation ->
            "ADAPTATION"

        Prequel ->
            "PREQUEL"

        Sequel ->
            "SEQUEL"

        Parent ->
            "PARENT"

        SideStory ->
            "SIDE_STORY"

        Character ->
            "CHARACTER"

        Summary ->
            "SUMMARY"

        Alternative ->
            "ALTERNATIVE"

        SpinOff ->
            "SPIN_OFF"

        Other ->
            "OTHER"

        Source ->
            "SOURCE"

        Compilation ->
            "COMPILATION"

        Contains ->
            "CONTAINS"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe MediaRelation
fromString enumString____ =
    case enumString____ of
        "ADAPTATION" ->
            Just Adaptation

        "PREQUEL" ->
            Just Prequel

        "SEQUEL" ->
            Just Sequel

        "PARENT" ->
            Just Parent

        "SIDE_STORY" ->
            Just SideStory

        "CHARACTER" ->
            Just Character

        "SUMMARY" ->
            Just Summary

        "ALTERNATIVE" ->
            Just Alternative

        "SPIN_OFF" ->
            Just SpinOff

        "OTHER" ->
            Just Other

        "SOURCE" ->
            Just Source

        "COMPILATION" ->
            Just Compilation

        "CONTAINS" ->
            Just Contains

        _ ->
            Nothing
