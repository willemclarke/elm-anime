-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module AniList.Enum.ScoreFormat exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| Media list scoring type

  - Point100 - An integer from 0-100
  - Point10Decimal - A float from 0-10 with 1 decimal place
  - Point10 - An integer from 0-10
  - Point5 - An integer from 0-5. Should be represented in Stars
  - Point3 - An integer from 0-3. Should be represented in Smileys. 0 => No Score, 1 => :(, 2 => :|, 3 => :)

-}
type ScoreFormat
    = Point100
    | Point10Decimal
    | Point10
    | Point5
    | Point3


list : List ScoreFormat
list =
    [ Point100, Point10Decimal, Point10, Point5, Point3 ]


decoder : Decoder ScoreFormat
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "POINT_100" ->
                        Decode.succeed Point100

                    "POINT_10_DECIMAL" ->
                        Decode.succeed Point10Decimal

                    "POINT_10" ->
                        Decode.succeed Point10

                    "POINT_5" ->
                        Decode.succeed Point5

                    "POINT_3" ->
                        Decode.succeed Point3

                    _ ->
                        Decode.fail ("Invalid ScoreFormat type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : ScoreFormat -> String
toString enum____ =
    case enum____ of
        Point100 ->
            "POINT_100"

        Point10Decimal ->
            "POINT_10_DECIMAL"

        Point10 ->
            "POINT_10"

        Point5 ->
            "POINT_5"

        Point3 ->
            "POINT_3"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe ScoreFormat
fromString enumString____ =
    case enumString____ of
        "POINT_100" ->
            Just Point100

        "POINT_10_DECIMAL" ->
            Just Point10Decimal

        "POINT_10" ->
            Just Point10

        "POINT_5" ->
            Just Point5

        "POINT_3" ->
            Just Point3

        _ ->
            Nothing
