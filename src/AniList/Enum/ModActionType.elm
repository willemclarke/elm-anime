-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module AniList.Enum.ModActionType exposing (..)

import Json.Decode as Decode exposing (Decoder)


type ModActionType
    = Note
    | Ban
    | Delete
    | Edit
    | Expire
    | Report
    | Reset
    | Anon


list : List ModActionType
list =
    [ Note, Ban, Delete, Edit, Expire, Report, Reset, Anon ]


decoder : Decoder ModActionType
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "NOTE" ->
                        Decode.succeed Note

                    "BAN" ->
                        Decode.succeed Ban

                    "DELETE" ->
                        Decode.succeed Delete

                    "EDIT" ->
                        Decode.succeed Edit

                    "EXPIRE" ->
                        Decode.succeed Expire

                    "REPORT" ->
                        Decode.succeed Report

                    "RESET" ->
                        Decode.succeed Reset

                    "ANON" ->
                        Decode.succeed Anon

                    _ ->
                        Decode.fail ("Invalid ModActionType type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : ModActionType -> String
toString enum____ =
    case enum____ of
        Note ->
            "NOTE"

        Ban ->
            "BAN"

        Delete ->
            "DELETE"

        Edit ->
            "EDIT"

        Expire ->
            "EXPIRE"

        Report ->
            "REPORT"

        Reset ->
            "RESET"

        Anon ->
            "ANON"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe ModActionType
fromString enumString____ =
    case enumString____ of
        "NOTE" ->
            Just Note

        "BAN" ->
            Just Ban

        "DELETE" ->
            Just Delete

        "EDIT" ->
            Just Edit

        "EXPIRE" ->
            Just Expire

        "REPORT" ->
            Just Report

        "RESET" ->
            Just Reset

        "ANON" ->
            Just Anon

        _ ->
            Nothing
