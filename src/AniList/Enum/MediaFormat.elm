-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module AniList.Enum.MediaFormat exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| The format the media was released in

  - Tv - Anime broadcast on television
  - TvShort - Anime which are under 15 minutes in length and broadcast on television
  - Movie - Anime movies with a theatrical release
  - Special - Special episodes that have been included in DVD/Blu-ray releases, picture dramas, pilots, etc
  - Ova - (Original Video Animation) Anime that have been released directly on DVD/Blu-ray without originally going through a theatrical release or television broadcast
  - Ona - (Original Net Animation) Anime that have been originally released online or are only available through streaming services.
  - Music - Short anime released as a music video
  - Manga - Professionally published manga with more than one chapter
  - Novel - Written books released as a series of light novels
  - OneShot - Manga with just one chapter

-}
type MediaFormat
    = Tv
    | TvShort
    | Movie
    | Special
    | Ova
    | Ona
    | Music
    | Manga
    | Novel
    | OneShot


list : List MediaFormat
list =
    [ Tv, TvShort, Movie, Special, Ova, Ona, Music, Manga, Novel, OneShot ]


decoder : Decoder MediaFormat
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "TV" ->
                        Decode.succeed Tv

                    "TV_SHORT" ->
                        Decode.succeed TvShort

                    "MOVIE" ->
                        Decode.succeed Movie

                    "SPECIAL" ->
                        Decode.succeed Special

                    "OVA" ->
                        Decode.succeed Ova

                    "ONA" ->
                        Decode.succeed Ona

                    "MUSIC" ->
                        Decode.succeed Music

                    "MANGA" ->
                        Decode.succeed Manga

                    "NOVEL" ->
                        Decode.succeed Novel

                    "ONE_SHOT" ->
                        Decode.succeed OneShot

                    _ ->
                        Decode.fail ("Invalid MediaFormat type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : MediaFormat -> String
toString enum____ =
    case enum____ of
        Tv ->
            "TV"

        TvShort ->
            "TV_SHORT"

        Movie ->
            "MOVIE"

        Special ->
            "SPECIAL"

        Ova ->
            "OVA"

        Ona ->
            "ONA"

        Music ->
            "MUSIC"

        Manga ->
            "MANGA"

        Novel ->
            "NOVEL"

        OneShot ->
            "ONE_SHOT"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe MediaFormat
fromString enumString____ =
    case enumString____ of
        "TV" ->
            Just Tv

        "TV_SHORT" ->
            Just TvShort

        "MOVIE" ->
            Just Movie

        "SPECIAL" ->
            Just Special

        "OVA" ->
            Just Ova

        "ONA" ->
            Just Ona

        "MUSIC" ->
            Just Music

        "MANGA" ->
            Just Manga

        "NOVEL" ->
            Just Novel

        "ONE_SHOT" ->
            Just OneShot

        _ ->
            Nothing
