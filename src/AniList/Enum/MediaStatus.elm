-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module AniList.Enum.MediaStatus exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| The current releasing status of the media

  - Finished - Has completed and is no longer being released
  - Releasing - Currently releasing
  - NotYetReleased - To be released at a later date
  - Cancelled - Ended before the work could be finished
  - Hiatus - Version 2 only. Is currently paused from releasing and will resume at a later date

-}
type MediaStatus
    = Finished
    | Releasing
    | NotYetReleased
    | Cancelled
    | Hiatus


list : List MediaStatus
list =
    [ Finished, Releasing, NotYetReleased, Cancelled, Hiatus ]


decoder : Decoder MediaStatus
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "FINISHED" ->
                        Decode.succeed Finished

                    "RELEASING" ->
                        Decode.succeed Releasing

                    "NOT_YET_RELEASED" ->
                        Decode.succeed NotYetReleased

                    "CANCELLED" ->
                        Decode.succeed Cancelled

                    "HIATUS" ->
                        Decode.succeed Hiatus

                    _ ->
                        Decode.fail ("Invalid MediaStatus type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : MediaStatus -> String
toString enum____ =
    case enum____ of
        Finished ->
            "FINISHED"

        Releasing ->
            "RELEASING"

        NotYetReleased ->
            "NOT_YET_RELEASED"

        Cancelled ->
            "CANCELLED"

        Hiatus ->
            "HIATUS"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe MediaStatus
fromString enumString____ =
    case enumString____ of
        "FINISHED" ->
            Just Finished

        "RELEASING" ->
            Just Releasing

        "NOT_YET_RELEASED" ->
            Just NotYetReleased

        "CANCELLED" ->
            Just Cancelled

        "HIATUS" ->
            Just Hiatus

        _ ->
            Nothing
