-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module AniList.Enum.UserStaffNameLanguage exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| The language the user wants to see staff and character names in

  - RomajiWestern - The romanization of the staff or character's native name, with western name ordering
  - Romaji - The romanization of the staff or character's native name
  - Native - The staff or character's name in their native language

-}
type UserStaffNameLanguage
    = RomajiWestern
    | Romaji
    | Native


list : List UserStaffNameLanguage
list =
    [ RomajiWestern, Romaji, Native ]


decoder : Decoder UserStaffNameLanguage
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "ROMAJI_WESTERN" ->
                        Decode.succeed RomajiWestern

                    "ROMAJI" ->
                        Decode.succeed Romaji

                    "NATIVE" ->
                        Decode.succeed Native

                    _ ->
                        Decode.fail ("Invalid UserStaffNameLanguage type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : UserStaffNameLanguage -> String
toString enum____ =
    case enum____ of
        RomajiWestern ->
            "ROMAJI_WESTERN"

        Romaji ->
            "ROMAJI"

        Native ->
            "NATIVE"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe UserStaffNameLanguage
fromString enumString____ =
    case enumString____ of
        "ROMAJI_WESTERN" ->
            Just RomajiWestern

        "ROMAJI" ->
            Just Romaji

        "NATIVE" ->
            Just Native

        _ ->
            Nothing
