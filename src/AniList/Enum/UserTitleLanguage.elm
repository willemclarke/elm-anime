-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module AniList.Enum.UserTitleLanguage exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| The language the user wants to see media titles in

  - Romaji - The romanization of the native language title
  - English - The official english title
  - Native - Official title in it's native language
  - RomajiStylised - The romanization of the native language title, stylised by media creator
  - EnglishStylised - The official english title, stylised by media creator
  - NativeStylised - Official title in it's native language, stylised by media creator

-}
type UserTitleLanguage
    = Romaji
    | English
    | Native
    | RomajiStylised
    | EnglishStylised
    | NativeStylised


list : List UserTitleLanguage
list =
    [ Romaji, English, Native, RomajiStylised, EnglishStylised, NativeStylised ]


decoder : Decoder UserTitleLanguage
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "ROMAJI" ->
                        Decode.succeed Romaji

                    "ENGLISH" ->
                        Decode.succeed English

                    "NATIVE" ->
                        Decode.succeed Native

                    "ROMAJI_STYLISED" ->
                        Decode.succeed RomajiStylised

                    "ENGLISH_STYLISED" ->
                        Decode.succeed EnglishStylised

                    "NATIVE_STYLISED" ->
                        Decode.succeed NativeStylised

                    _ ->
                        Decode.fail ("Invalid UserTitleLanguage type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : UserTitleLanguage -> String
toString enum____ =
    case enum____ of
        Romaji ->
            "ROMAJI"

        English ->
            "ENGLISH"

        Native ->
            "NATIVE"

        RomajiStylised ->
            "ROMAJI_STYLISED"

        EnglishStylised ->
            "ENGLISH_STYLISED"

        NativeStylised ->
            "NATIVE_STYLISED"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe UserTitleLanguage
fromString enumString____ =
    case enumString____ of
        "ROMAJI" ->
            Just Romaji

        "ENGLISH" ->
            Just English

        "NATIVE" ->
            Just Native

        "ROMAJI_STYLISED" ->
            Just RomajiStylised

        "ENGLISH_STYLISED" ->
            Just EnglishStylised

        "NATIVE_STYLISED" ->
            Just NativeStylised

        _ ->
            Nothing
