-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module AniList.Enum.ReviewRating exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| Review rating enums
-}
type ReviewRating
    = NoVote
    | UpVote
    | DownVote


list : List ReviewRating
list =
    [ NoVote, UpVote, DownVote ]


decoder : Decoder ReviewRating
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "NO_VOTE" ->
                        Decode.succeed NoVote

                    "UP_VOTE" ->
                        Decode.succeed UpVote

                    "DOWN_VOTE" ->
                        Decode.succeed DownVote

                    _ ->
                        Decode.fail ("Invalid ReviewRating type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : ReviewRating -> String
toString enum____ =
    case enum____ of
        NoVote ->
            "NO_VOTE"

        UpVote ->
            "UP_VOTE"

        DownVote ->
            "DOWN_VOTE"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe ReviewRating
fromString enumString____ =
    case enumString____ of
        "NO_VOTE" ->
            Just NoVote

        "UP_VOTE" ->
            Just UpVote

        "DOWN_VOTE" ->
            Just DownVote

        _ ->
            Nothing
