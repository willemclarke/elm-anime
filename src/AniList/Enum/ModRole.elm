-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module AniList.Enum.ModRole exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| Mod role enums

  - Admin - An AniList administrator
  - LeadDeveloper - A head developer of AniList
  - Developer - An AniList developer
  - LeadCommunity - A lead community moderator
  - Community - A community moderator
  - DiscordCommunity - A discord community moderator
  - LeadAnimeData - A lead anime data moderator
  - AnimeData - An anime data moderator
  - LeadMangaData - A lead manga data moderator
  - MangaData - A manga data moderator
  - LeadSocialMedia - A lead social media moderator
  - SocialMedia - A social media moderator
  - Retired - A retired moderator

-}
type ModRole
    = Admin
    | LeadDeveloper
    | Developer
    | LeadCommunity
    | Community
    | DiscordCommunity
    | LeadAnimeData
    | AnimeData
    | LeadMangaData
    | MangaData
    | LeadSocialMedia
    | SocialMedia
    | Retired


list : List ModRole
list =
    [ Admin, LeadDeveloper, Developer, LeadCommunity, Community, DiscordCommunity, LeadAnimeData, AnimeData, LeadMangaData, MangaData, LeadSocialMedia, SocialMedia, Retired ]


decoder : Decoder ModRole
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "ADMIN" ->
                        Decode.succeed Admin

                    "LEAD_DEVELOPER" ->
                        Decode.succeed LeadDeveloper

                    "DEVELOPER" ->
                        Decode.succeed Developer

                    "LEAD_COMMUNITY" ->
                        Decode.succeed LeadCommunity

                    "COMMUNITY" ->
                        Decode.succeed Community

                    "DISCORD_COMMUNITY" ->
                        Decode.succeed DiscordCommunity

                    "LEAD_ANIME_DATA" ->
                        Decode.succeed LeadAnimeData

                    "ANIME_DATA" ->
                        Decode.succeed AnimeData

                    "LEAD_MANGA_DATA" ->
                        Decode.succeed LeadMangaData

                    "MANGA_DATA" ->
                        Decode.succeed MangaData

                    "LEAD_SOCIAL_MEDIA" ->
                        Decode.succeed LeadSocialMedia

                    "SOCIAL_MEDIA" ->
                        Decode.succeed SocialMedia

                    "RETIRED" ->
                        Decode.succeed Retired

                    _ ->
                        Decode.fail ("Invalid ModRole type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : ModRole -> String
toString enum____ =
    case enum____ of
        Admin ->
            "ADMIN"

        LeadDeveloper ->
            "LEAD_DEVELOPER"

        Developer ->
            "DEVELOPER"

        LeadCommunity ->
            "LEAD_COMMUNITY"

        Community ->
            "COMMUNITY"

        DiscordCommunity ->
            "DISCORD_COMMUNITY"

        LeadAnimeData ->
            "LEAD_ANIME_DATA"

        AnimeData ->
            "ANIME_DATA"

        LeadMangaData ->
            "LEAD_MANGA_DATA"

        MangaData ->
            "MANGA_DATA"

        LeadSocialMedia ->
            "LEAD_SOCIAL_MEDIA"

        SocialMedia ->
            "SOCIAL_MEDIA"

        Retired ->
            "RETIRED"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe ModRole
fromString enumString____ =
    case enumString____ of
        "ADMIN" ->
            Just Admin

        "LEAD_DEVELOPER" ->
            Just LeadDeveloper

        "DEVELOPER" ->
            Just Developer

        "LEAD_COMMUNITY" ->
            Just LeadCommunity

        "COMMUNITY" ->
            Just Community

        "DISCORD_COMMUNITY" ->
            Just DiscordCommunity

        "LEAD_ANIME_DATA" ->
            Just LeadAnimeData

        "ANIME_DATA" ->
            Just AnimeData

        "LEAD_MANGA_DATA" ->
            Just LeadMangaData

        "MANGA_DATA" ->
            Just MangaData

        "LEAD_SOCIAL_MEDIA" ->
            Just LeadSocialMedia

        "SOCIAL_MEDIA" ->
            Just SocialMedia

        "RETIRED" ->
            Just Retired

        _ ->
            Nothing
