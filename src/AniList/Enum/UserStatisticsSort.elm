-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module AniList.Enum.UserStatisticsSort exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| User statistics sort enum
-}
type UserStatisticsSort
    = Id
    | IdDesc
    | Count
    | CountDesc
    | Progress
    | ProgressDesc
    | MeanScore
    | MeanScoreDesc


list : List UserStatisticsSort
list =
    [ Id, IdDesc, Count, CountDesc, Progress, ProgressDesc, MeanScore, MeanScoreDesc ]


decoder : Decoder UserStatisticsSort
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "ID" ->
                        Decode.succeed Id

                    "ID_DESC" ->
                        Decode.succeed IdDesc

                    "COUNT" ->
                        Decode.succeed Count

                    "COUNT_DESC" ->
                        Decode.succeed CountDesc

                    "PROGRESS" ->
                        Decode.succeed Progress

                    "PROGRESS_DESC" ->
                        Decode.succeed ProgressDesc

                    "MEAN_SCORE" ->
                        Decode.succeed MeanScore

                    "MEAN_SCORE_DESC" ->
                        Decode.succeed MeanScoreDesc

                    _ ->
                        Decode.fail ("Invalid UserStatisticsSort type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : UserStatisticsSort -> String
toString enum____ =
    case enum____ of
        Id ->
            "ID"

        IdDesc ->
            "ID_DESC"

        Count ->
            "COUNT"

        CountDesc ->
            "COUNT_DESC"

        Progress ->
            "PROGRESS"

        ProgressDesc ->
            "PROGRESS_DESC"

        MeanScore ->
            "MEAN_SCORE"

        MeanScoreDesc ->
            "MEAN_SCORE_DESC"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe UserStatisticsSort
fromString enumString____ =
    case enumString____ of
        "ID" ->
            Just Id

        "ID_DESC" ->
            Just IdDesc

        "COUNT" ->
            Just Count

        "COUNT_DESC" ->
            Just CountDesc

        "PROGRESS" ->
            Just Progress

        "PROGRESS_DESC" ->
            Just ProgressDesc

        "MEAN_SCORE" ->
            Just MeanScore

        "MEAN_SCORE_DESC" ->
            Just MeanScoreDesc

        _ ->
            Nothing
