-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module AniList.Enum.MediaListStatus exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| Media list watching/reading status enum.

  - Current - Currently watching/reading
  - Planning - Planning to watch/read
  - Completed - Finished watching/reading
  - Dropped - Stopped watching/reading before completing
  - Paused - Paused watching/reading
  - Repeating - Re-watching/reading

-}
type MediaListStatus
    = Current
    | Planning
    | Completed
    | Dropped
    | Paused
    | Repeating


list : List MediaListStatus
list =
    [ Current, Planning, Completed, Dropped, Paused, Repeating ]


decoder : Decoder MediaListStatus
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "CURRENT" ->
                        Decode.succeed Current

                    "PLANNING" ->
                        Decode.succeed Planning

                    "COMPLETED" ->
                        Decode.succeed Completed

                    "DROPPED" ->
                        Decode.succeed Dropped

                    "PAUSED" ->
                        Decode.succeed Paused

                    "REPEATING" ->
                        Decode.succeed Repeating

                    _ ->
                        Decode.fail ("Invalid MediaListStatus type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : MediaListStatus -> String
toString enum____ =
    case enum____ of
        Current ->
            "CURRENT"

        Planning ->
            "PLANNING"

        Completed ->
            "COMPLETED"

        Dropped ->
            "DROPPED"

        Paused ->
            "PAUSED"

        Repeating ->
            "REPEATING"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe MediaListStatus
fromString enumString____ =
    case enumString____ of
        "CURRENT" ->
            Just Current

        "PLANNING" ->
            Just Planning

        "COMPLETED" ->
            Just Completed

        "DROPPED" ->
            Just Dropped

        "PAUSED" ->
            Just Paused

        "REPEATING" ->
            Just Repeating

        _ ->
            Nothing
