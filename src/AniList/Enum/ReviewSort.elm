-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module AniList.Enum.ReviewSort exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| Review sort enums
-}
type ReviewSort
    = Id
    | IdDesc
    | Score
    | ScoreDesc
    | Rating
    | RatingDesc
    | CreatedAt
    | CreatedAtDesc
    | UpdatedAt
    | UpdatedAtDesc


list : List ReviewSort
list =
    [ Id, IdDesc, Score, ScoreDesc, Rating, RatingDesc, CreatedAt, CreatedAtDesc, UpdatedAt, UpdatedAtDesc ]


decoder : Decoder ReviewSort
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "ID" ->
                        Decode.succeed Id

                    "ID_DESC" ->
                        Decode.succeed IdDesc

                    "SCORE" ->
                        Decode.succeed Score

                    "SCORE_DESC" ->
                        Decode.succeed ScoreDesc

                    "RATING" ->
                        Decode.succeed Rating

                    "RATING_DESC" ->
                        Decode.succeed RatingDesc

                    "CREATED_AT" ->
                        Decode.succeed CreatedAt

                    "CREATED_AT_DESC" ->
                        Decode.succeed CreatedAtDesc

                    "UPDATED_AT" ->
                        Decode.succeed UpdatedAt

                    "UPDATED_AT_DESC" ->
                        Decode.succeed UpdatedAtDesc

                    _ ->
                        Decode.fail ("Invalid ReviewSort type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : ReviewSort -> String
toString enum____ =
    case enum____ of
        Id ->
            "ID"

        IdDesc ->
            "ID_DESC"

        Score ->
            "SCORE"

        ScoreDesc ->
            "SCORE_DESC"

        Rating ->
            "RATING"

        RatingDesc ->
            "RATING_DESC"

        CreatedAt ->
            "CREATED_AT"

        CreatedAtDesc ->
            "CREATED_AT_DESC"

        UpdatedAt ->
            "UPDATED_AT"

        UpdatedAtDesc ->
            "UPDATED_AT_DESC"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe ReviewSort
fromString enumString____ =
    case enumString____ of
        "ID" ->
            Just Id

        "ID_DESC" ->
            Just IdDesc

        "SCORE" ->
            Just Score

        "SCORE_DESC" ->
            Just ScoreDesc

        "RATING" ->
            Just Rating

        "RATING_DESC" ->
            Just RatingDesc

        "CREATED_AT" ->
            Just CreatedAt

        "CREATED_AT_DESC" ->
            Just CreatedAtDesc

        "UPDATED_AT" ->
            Just UpdatedAt

        "UPDATED_AT_DESC" ->
            Just UpdatedAtDesc

        _ ->
            Nothing
