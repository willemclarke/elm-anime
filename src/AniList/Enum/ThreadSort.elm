-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module AniList.Enum.ThreadSort exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| Thread sort enums
-}
type ThreadSort
    = Id
    | IdDesc
    | Title
    | TitleDesc
    | CreatedAt
    | CreatedAtDesc
    | UpdatedAt
    | UpdatedAtDesc
    | RepliedAt
    | RepliedAtDesc
    | ReplyCount
    | ReplyCountDesc
    | ViewCount
    | ViewCountDesc
    | IsSticky
    | SearchMatch


list : List ThreadSort
list =
    [ Id, IdDesc, Title, TitleDesc, CreatedAt, CreatedAtDesc, UpdatedAt, UpdatedAtDesc, RepliedAt, RepliedAtDesc, ReplyCount, ReplyCountDesc, ViewCount, ViewCountDesc, IsSticky, SearchMatch ]


decoder : Decoder ThreadSort
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "ID" ->
                        Decode.succeed Id

                    "ID_DESC" ->
                        Decode.succeed IdDesc

                    "TITLE" ->
                        Decode.succeed Title

                    "TITLE_DESC" ->
                        Decode.succeed TitleDesc

                    "CREATED_AT" ->
                        Decode.succeed CreatedAt

                    "CREATED_AT_DESC" ->
                        Decode.succeed CreatedAtDesc

                    "UPDATED_AT" ->
                        Decode.succeed UpdatedAt

                    "UPDATED_AT_DESC" ->
                        Decode.succeed UpdatedAtDesc

                    "REPLIED_AT" ->
                        Decode.succeed RepliedAt

                    "REPLIED_AT_DESC" ->
                        Decode.succeed RepliedAtDesc

                    "REPLY_COUNT" ->
                        Decode.succeed ReplyCount

                    "REPLY_COUNT_DESC" ->
                        Decode.succeed ReplyCountDesc

                    "VIEW_COUNT" ->
                        Decode.succeed ViewCount

                    "VIEW_COUNT_DESC" ->
                        Decode.succeed ViewCountDesc

                    "IS_STICKY" ->
                        Decode.succeed IsSticky

                    "SEARCH_MATCH" ->
                        Decode.succeed SearchMatch

                    _ ->
                        Decode.fail ("Invalid ThreadSort type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : ThreadSort -> String
toString enum____ =
    case enum____ of
        Id ->
            "ID"

        IdDesc ->
            "ID_DESC"

        Title ->
            "TITLE"

        TitleDesc ->
            "TITLE_DESC"

        CreatedAt ->
            "CREATED_AT"

        CreatedAtDesc ->
            "CREATED_AT_DESC"

        UpdatedAt ->
            "UPDATED_AT"

        UpdatedAtDesc ->
            "UPDATED_AT_DESC"

        RepliedAt ->
            "REPLIED_AT"

        RepliedAtDesc ->
            "REPLIED_AT_DESC"

        ReplyCount ->
            "REPLY_COUNT"

        ReplyCountDesc ->
            "REPLY_COUNT_DESC"

        ViewCount ->
            "VIEW_COUNT"

        ViewCountDesc ->
            "VIEW_COUNT_DESC"

        IsSticky ->
            "IS_STICKY"

        SearchMatch ->
            "SEARCH_MATCH"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe ThreadSort
fromString enumString____ =
    case enumString____ of
        "ID" ->
            Just Id

        "ID_DESC" ->
            Just IdDesc

        "TITLE" ->
            Just Title

        "TITLE_DESC" ->
            Just TitleDesc

        "CREATED_AT" ->
            Just CreatedAt

        "CREATED_AT_DESC" ->
            Just CreatedAtDesc

        "UPDATED_AT" ->
            Just UpdatedAt

        "UPDATED_AT_DESC" ->
            Just UpdatedAtDesc

        "REPLIED_AT" ->
            Just RepliedAt

        "REPLIED_AT_DESC" ->
            Just RepliedAtDesc

        "REPLY_COUNT" ->
            Just ReplyCount

        "REPLY_COUNT_DESC" ->
            Just ReplyCountDesc

        "VIEW_COUNT" ->
            Just ViewCount

        "VIEW_COUNT_DESC" ->
            Just ViewCountDesc

        "IS_STICKY" ->
            Just IsSticky

        "SEARCH_MATCH" ->
            Just SearchMatch

        _ ->
            Nothing
