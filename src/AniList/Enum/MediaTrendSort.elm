-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module AniList.Enum.MediaTrendSort exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| Media trend sort enums
-}
type MediaTrendSort
    = Id
    | IdDesc
    | MediaId
    | MediaIdDesc
    | Date
    | DateDesc
    | Score
    | ScoreDesc
    | Popularity
    | PopularityDesc
    | Trending
    | TrendingDesc
    | Episode
    | EpisodeDesc


list : List MediaTrendSort
list =
    [ Id, IdDesc, MediaId, MediaIdDesc, Date, DateDesc, Score, ScoreDesc, Popularity, PopularityDesc, Trending, TrendingDesc, Episode, EpisodeDesc ]


decoder : Decoder MediaTrendSort
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "ID" ->
                        Decode.succeed Id

                    "ID_DESC" ->
                        Decode.succeed IdDesc

                    "MEDIA_ID" ->
                        Decode.succeed MediaId

                    "MEDIA_ID_DESC" ->
                        Decode.succeed MediaIdDesc

                    "DATE" ->
                        Decode.succeed Date

                    "DATE_DESC" ->
                        Decode.succeed DateDesc

                    "SCORE" ->
                        Decode.succeed Score

                    "SCORE_DESC" ->
                        Decode.succeed ScoreDesc

                    "POPULARITY" ->
                        Decode.succeed Popularity

                    "POPULARITY_DESC" ->
                        Decode.succeed PopularityDesc

                    "TRENDING" ->
                        Decode.succeed Trending

                    "TRENDING_DESC" ->
                        Decode.succeed TrendingDesc

                    "EPISODE" ->
                        Decode.succeed Episode

                    "EPISODE_DESC" ->
                        Decode.succeed EpisodeDesc

                    _ ->
                        Decode.fail ("Invalid MediaTrendSort type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : MediaTrendSort -> String
toString enum____ =
    case enum____ of
        Id ->
            "ID"

        IdDesc ->
            "ID_DESC"

        MediaId ->
            "MEDIA_ID"

        MediaIdDesc ->
            "MEDIA_ID_DESC"

        Date ->
            "DATE"

        DateDesc ->
            "DATE_DESC"

        Score ->
            "SCORE"

        ScoreDesc ->
            "SCORE_DESC"

        Popularity ->
            "POPULARITY"

        PopularityDesc ->
            "POPULARITY_DESC"

        Trending ->
            "TRENDING"

        TrendingDesc ->
            "TRENDING_DESC"

        Episode ->
            "EPISODE"

        EpisodeDesc ->
            "EPISODE_DESC"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe MediaTrendSort
fromString enumString____ =
    case enumString____ of
        "ID" ->
            Just Id

        "ID_DESC" ->
            Just IdDesc

        "MEDIA_ID" ->
            Just MediaId

        "MEDIA_ID_DESC" ->
            Just MediaIdDesc

        "DATE" ->
            Just Date

        "DATE_DESC" ->
            Just DateDesc

        "SCORE" ->
            Just Score

        "SCORE_DESC" ->
            Just ScoreDesc

        "POPULARITY" ->
            Just Popularity

        "POPULARITY_DESC" ->
            Just PopularityDesc

        "TRENDING" ->
            Just Trending

        "TRENDING_DESC" ->
            Just TrendingDesc

        "EPISODE" ->
            Just Episode

        "EPISODE_DESC" ->
            Just EpisodeDesc

        _ ->
            Nothing
