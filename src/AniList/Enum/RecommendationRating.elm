-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module AniList.Enum.RecommendationRating exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| Recommendation rating enums
-}
type RecommendationRating
    = NoRating
    | RateUp
    | RateDown


list : List RecommendationRating
list =
    [ NoRating, RateUp, RateDown ]


decoder : Decoder RecommendationRating
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "NO_RATING" ->
                        Decode.succeed NoRating

                    "RATE_UP" ->
                        Decode.succeed RateUp

                    "RATE_DOWN" ->
                        Decode.succeed RateDown

                    _ ->
                        Decode.fail ("Invalid RecommendationRating type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : RecommendationRating -> String
toString enum____ =
    case enum____ of
        NoRating ->
            "NO_RATING"

        RateUp ->
            "RATE_UP"

        RateDown ->
            "RATE_DOWN"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe RecommendationRating
fromString enumString____ =
    case enumString____ of
        "NO_RATING" ->
            Just NoRating

        "RATE_UP" ->
            Just RateUp

        "RATE_DOWN" ->
            Just RateDown

        _ ->
            Nothing
