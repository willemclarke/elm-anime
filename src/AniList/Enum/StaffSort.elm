-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module AniList.Enum.StaffSort exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| Staff sort enums

  - Relevance - Order manually decided by moderators

-}
type StaffSort
    = Id
    | IdDesc
    | Role
    | RoleDesc
    | Language
    | LanguageDesc
    | SearchMatch
    | Favourites
    | FavouritesDesc
    | Relevance


list : List StaffSort
list =
    [ Id, IdDesc, Role, RoleDesc, Language, LanguageDesc, SearchMatch, Favourites, FavouritesDesc, Relevance ]


decoder : Decoder StaffSort
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "ID" ->
                        Decode.succeed Id

                    "ID_DESC" ->
                        Decode.succeed IdDesc

                    "ROLE" ->
                        Decode.succeed Role

                    "ROLE_DESC" ->
                        Decode.succeed RoleDesc

                    "LANGUAGE" ->
                        Decode.succeed Language

                    "LANGUAGE_DESC" ->
                        Decode.succeed LanguageDesc

                    "SEARCH_MATCH" ->
                        Decode.succeed SearchMatch

                    "FAVOURITES" ->
                        Decode.succeed Favourites

                    "FAVOURITES_DESC" ->
                        Decode.succeed FavouritesDesc

                    "RELEVANCE" ->
                        Decode.succeed Relevance

                    _ ->
                        Decode.fail ("Invalid StaffSort type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : StaffSort -> String
toString enum____ =
    case enum____ of
        Id ->
            "ID"

        IdDesc ->
            "ID_DESC"

        Role ->
            "ROLE"

        RoleDesc ->
            "ROLE_DESC"

        Language ->
            "LANGUAGE"

        LanguageDesc ->
            "LANGUAGE_DESC"

        SearchMatch ->
            "SEARCH_MATCH"

        Favourites ->
            "FAVOURITES"

        FavouritesDesc ->
            "FAVOURITES_DESC"

        Relevance ->
            "RELEVANCE"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe StaffSort
fromString enumString____ =
    case enumString____ of
        "ID" ->
            Just Id

        "ID_DESC" ->
            Just IdDesc

        "ROLE" ->
            Just Role

        "ROLE_DESC" ->
            Just RoleDesc

        "LANGUAGE" ->
            Just Language

        "LANGUAGE_DESC" ->
            Just LanguageDesc

        "SEARCH_MATCH" ->
            Just SearchMatch

        "FAVOURITES" ->
            Just Favourites

        "FAVOURITES_DESC" ->
            Just FavouritesDesc

        "RELEVANCE" ->
            Just Relevance

        _ ->
            Nothing
