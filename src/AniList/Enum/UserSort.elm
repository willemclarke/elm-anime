-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module AniList.Enum.UserSort exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| User sort enums
-}
type UserSort
    = Id
    | IdDesc
    | Username
    | UsernameDesc
    | WatchedTime
    | WatchedTimeDesc
    | ChaptersRead
    | ChaptersReadDesc
    | SearchMatch


list : List UserSort
list =
    [ Id, IdDesc, Username, UsernameDesc, WatchedTime, WatchedTimeDesc, ChaptersRead, ChaptersReadDesc, SearchMatch ]


decoder : Decoder UserSort
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "ID" ->
                        Decode.succeed Id

                    "ID_DESC" ->
                        Decode.succeed IdDesc

                    "USERNAME" ->
                        Decode.succeed Username

                    "USERNAME_DESC" ->
                        Decode.succeed UsernameDesc

                    "WATCHED_TIME" ->
                        Decode.succeed WatchedTime

                    "WATCHED_TIME_DESC" ->
                        Decode.succeed WatchedTimeDesc

                    "CHAPTERS_READ" ->
                        Decode.succeed ChaptersRead

                    "CHAPTERS_READ_DESC" ->
                        Decode.succeed ChaptersReadDesc

                    "SEARCH_MATCH" ->
                        Decode.succeed SearchMatch

                    _ ->
                        Decode.fail ("Invalid UserSort type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : UserSort -> String
toString enum____ =
    case enum____ of
        Id ->
            "ID"

        IdDesc ->
            "ID_DESC"

        Username ->
            "USERNAME"

        UsernameDesc ->
            "USERNAME_DESC"

        WatchedTime ->
            "WATCHED_TIME"

        WatchedTimeDesc ->
            "WATCHED_TIME_DESC"

        ChaptersRead ->
            "CHAPTERS_READ"

        ChaptersReadDesc ->
            "CHAPTERS_READ_DESC"

        SearchMatch ->
            "SEARCH_MATCH"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe UserSort
fromString enumString____ =
    case enumString____ of
        "ID" ->
            Just Id

        "ID_DESC" ->
            Just IdDesc

        "USERNAME" ->
            Just Username

        "USERNAME_DESC" ->
            Just UsernameDesc

        "WATCHED_TIME" ->
            Just WatchedTime

        "WATCHED_TIME_DESC" ->
            Just WatchedTimeDesc

        "CHAPTERS_READ" ->
            Just ChaptersRead

        "CHAPTERS_READ_DESC" ->
            Just ChaptersReadDesc

        "SEARCH_MATCH" ->
            Just SearchMatch

        _ ->
            Nothing
