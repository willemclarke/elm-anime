-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module AniList.Enum.SiteTrendSort exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| Site trend sort enums
-}
type SiteTrendSort
    = Date
    | DateDesc
    | Count
    | CountDesc
    | Change
    | ChangeDesc


list : List SiteTrendSort
list =
    [ Date, DateDesc, Count, CountDesc, Change, ChangeDesc ]


decoder : Decoder SiteTrendSort
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "DATE" ->
                        Decode.succeed Date

                    "DATE_DESC" ->
                        Decode.succeed DateDesc

                    "COUNT" ->
                        Decode.succeed Count

                    "COUNT_DESC" ->
                        Decode.succeed CountDesc

                    "CHANGE" ->
                        Decode.succeed Change

                    "CHANGE_DESC" ->
                        Decode.succeed ChangeDesc

                    _ ->
                        Decode.fail ("Invalid SiteTrendSort type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : SiteTrendSort -> String
toString enum____ =
    case enum____ of
        Date ->
            "DATE"

        DateDesc ->
            "DATE_DESC"

        Count ->
            "COUNT"

        CountDesc ->
            "COUNT_DESC"

        Change ->
            "CHANGE"

        ChangeDesc ->
            "CHANGE_DESC"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe SiteTrendSort
fromString enumString____ =
    case enumString____ of
        "DATE" ->
            Just Date

        "DATE_DESC" ->
            Just DateDesc

        "COUNT" ->
            Just Count

        "COUNT_DESC" ->
            Just CountDesc

        "CHANGE" ->
            Just Change

        "CHANGE_DESC" ->
            Just ChangeDesc

        _ ->
            Nothing
